{
  "id": "598",
  "title": "Range Addition II",
  "slug": "range-addition-ii",
  "difficulty": "Easy",
  "likes": 208,
  "dislikes": 486,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Range Addition\", \"titleSlug\": \"range-addition\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "146",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "awQVAxR8": [
      {
        "code": "public class Solution {\n    public int maxCount(int m, int n, int[][] ops) {\n        int[][] arr = new int[m][n];\n        for (int[] op: ops) {\n            for (int i = 0; i < op[0]; i++) {\n                for (int j = 0; j < op[1]; j++) {\n                    arr[i][j] += 1;\n                }\n            }\n        }\n        int count = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (arr[i][j] == arr[0][0])\n                    count++;\n            }\n        }\n        return count;\n    }\n}\n",
        "langSlug": "java"
      }
    ],
    "eUWGJ45b": [
      {
        "code": "public class Solution {\n    public int maxCount(int m, int n, int[][] ops) {\n        for (int[] op: ops) {\n            m = Math.min(m, op[0]);\n            n = Math.min(n, op[1]);\n        }\n        return m * n;\n    }\n}\n",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Math"
  ]
}