{
  "id": "617",
  "title": "Merge Two Binary Trees",
  "slug": "merge-two-binary-trees",
  "difficulty": "Easy",
  "likes": 2036,
  "dislikes": 138,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "163",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "d9nZDPEJ": [
      {
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\n        if (t1 == null)\n            return t2;\n        if (t2 == null)\n            return t1;\n        t1.val += t2.val;\n        t1.left = mergeTrees(t1.left, t2.left);\n        t1.right = mergeTrees(t1.right, t2.right);\n        return t1;\n    }\n}\n",
        "langSlug": "java"
      }
    ],
    "v2TK7i2x": [
      {
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\n        if (t1 == null)\n            return t2;\n        Stack < TreeNode[] > stack = new Stack < > ();\n        stack.push(new TreeNode[] {t1, t2});\n        while (!stack.isEmpty()) {\n            TreeNode[] t = stack.pop();\n            if (t[0] == null || t[1] == null) {\n                continue;\n            }\n            t[0].val += t[1].val;\n            if (t[0].left == null) {\n                t[0].left = t[1].left;\n            } else {\n                stack.push(new TreeNode[] {t[0].left, t[1].left});\n            }\n            if (t[0].right == null) {\n                t[0].right = t[1].right;\n            } else {\n                stack.push(new TreeNode[] {t[0].right, t[1].right});\n            }\n        }\n        return t1;\n    }\n}\n",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Tree"
  ]
}