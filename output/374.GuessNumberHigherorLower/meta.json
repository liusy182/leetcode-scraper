{
  "id": "374",
  "title": "Guess Number Higher or Lower",
  "slug": "guess-number-higher-or-lower",
  "difficulty": "Easy",
  "likes": 259,
  "dislikes": 1287,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"First Bad Version\", \"titleSlug\": \"first-bad-version\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower II\", \"titleSlug\": \"guess-number-higher-or-lower-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K Closest Elements\", \"titleSlug\": \"find-k-closest-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "57",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "fbFHDKsc": [
      {
        "code": "/* The guess API is defined in the parent class GuessGame.\n   @param num, your guess\n   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n      int guess(int num); */\n\npublic class Solution extends GuessGame {\n    public int guessNumber(int n) {\n        for (int i = 1; i < n; i++)\n            if (guess(i) == 0)\n                return i;\n        return n;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "84NfKnsE": [
      {
        "code": "/* The guess API is defined in the parent class GuessGame.\n   @param num, your guess\n   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n      int guess(int num); */\n\npublic class Solution extends GuessGame {\n    public int guessNumber(int n) {\n        int low = 1;\n        int high = n;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            int res = guess(mid);\n            if (res == 0)\n                return mid;\n            else if (res < 0)\n                high = mid - 1;\n            else\n                low = mid + 1;\n        }\n        return -1;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "ZVkdvE5j": [
      {
        "code": "/* The guess API is defined in the parent class GuessGame.\n   @param num, your guess\n   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n      int guess(int num); */\n\npublic class Solution extends GuessGame {\n    public int guessNumber(int n) {\n        int low = 1;\n        int high = n;\n        while (low <= high) {\n            int mid1 = low + (high - low) / 3;\n            int mid2 = high - (high - low) / 3;\n            int res1 = guess(mid1);\n            int res2 = guess(mid2);\n            if (res1 == 0)\n                return mid1;\n            if (res2 == 0)\n                return mid2;\n            else if (res1 < 0)\n                high = mid1 - 1;\n            else if (res2 > 0)\n                low = mid2 + 1;\n            else {\n                low = mid1 + 1;\n                high = mid2 - 1;\n            }\n        }\n        return -1;\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Binary Search"
  ]
}