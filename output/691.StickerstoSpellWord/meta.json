{
  "id": "691",
  "title": "Stickers to Spell Word",
  "slug": "stickers-to-spell-word",
  "difficulty": "Hard",
  "likes": 275,
  "dislikes": 26,
  "hints": [
    "We want to perform an exhaustive search, but we need to speed it up based on the input data being random.  \r\n\r\nFor all stickers, we can ignore any letters that are not in the target word.  \r\n\r\nWhen our candidate answer won't be smaller than an answer we have already found, we can stop searching this path.  \r\n\r\nWhen a sticker dominates another, we shouldn't include the dominated sticker in our sticker collection.  [Here, we say a sticker `A` dominates `B` if `A.count(letter) >= B.count(letter)` for all letters.]"
  ],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Ransom Note\", \"titleSlug\": \"ransom-note\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "solution": {
    "id": "257",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "KP3fS7G3": [
      {
        "code": "class Solution {\n    int best;\n    int[][] stickersCount;\n    int[] targetCount;\n\n    public void search(int ans, int row) {\n        if (ans >= best) return;\n        if (row == stickersCount.length) {\n            for (int c: targetCount) if (c > 0) return;\n            best = ans;\n            return;\n        }\n\n        int used = 0;\n        for (int i = 0; i < stickersCount[row].length; i++) {\n            if (targetCount[i] > 0 && stickersCount[row][i] > 0) {\n                used = Math.max(used, (targetCount[i] - 1) / stickersCount[row][i] + 1);\n            }\n        }\n        for (int i = 0; i < stickersCount[row].length; i++) {\n            targetCount[i] -= used * stickersCount[row][i];\n        }\n\n        search(ans + used, row + 1);\n        while (used > 0) {\n            for (int i = 0; i < stickersCount[row].length; i++) {\n                targetCount[i] += stickersCount[row][i];\n            }\n            used--;\n            search(ans + used, row + 1);\n        }\n    }\n\n    public int minStickers(String[] stickers, String target) {\n        int[] targetNaiveCount = new int[26];\n        for (char c: target.toCharArray()) targetNaiveCount[c - 'a']++;\n\n        int[] index = new int[26];\n        int t = 0;\n        for (int i = 0; i < 26; i++) {\n            if (targetNaiveCount[i] > 0) {\n                index[i] = t++;\n            } else {\n                index[i] = -1;\n            }\n        }\n\n        targetCount = new int[t];\n        t = 0;\n        for (int c: targetNaiveCount) if (c > 0) {\n            targetCount[t++] = c;\n        }\n\n        stickersCount = new int[stickers.length][t];\n        for (int i = 0; i < stickers.length; i++) {\n            for (char c: stickers[i].toCharArray()) {\n                int j = index[c - 'a'];\n                if (j >= 0) stickersCount[i][j]++;\n            }\n        }\n\n        int anchor = 0;\n        for (int i = 0; i < stickers.length; i++) {\n            for (int j = anchor; j < stickers.length; j++) if (j != i) {\n                boolean dominated = true;\n                for (int k = 0; k < t; k++) {\n                    if (stickersCount[i][k] > stickersCount[j][k]) {\n                        dominated = false;\n                        break;\n                    }\n                }\n\n                if (dominated) {\n                    int[] tmp = stickersCount[i];\n                    stickersCount[i] = stickersCount[anchor];\n                    stickersCount[anchor++] = tmp;\n                    break;\n                }\n            }\n        }\n\n        best = target.length() + 1;\n        search(0, anchor);\n        return best <= target.length() ? best : -1;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minStickers(self, stickers, target):\n        t_count = collections.Counter(target)\n        A = [collections.Counter(sticker) & t_count\n             for sticker in stickers]\n\n        for i in range(len(A) - 1, -1, -1):\n            if any(A[i] == A[i] & A[j] for j in range(len(A)) if i != j):\n                A.pop(i)\n\n        self.best = len(target) + 1\n        def search(ans = 0):\n            if ans >= self.best: return\n            if not A:\n                if all(t_count[letter] <= 0 for letter in t_count):\n                    self.best = ans\n                return\n\n            sticker = A.pop()\n            used = max((t_count[letter] - 1) // sticker[letter] + 1\n                        for letter in sticker)\n            used = max(used, 0)\n\n            for c in sticker:\n                t_count[c] -= used * sticker[c]\n\n            search(ans + used)\n            for i in range(used - 1, -1, -1):\n                for letter in sticker:\n                    t_count[letter] += sticker[letter]\n                search(ans + i)\n\n            A.append(sticker)\n\n        search()\n        return self.best if self.best <= len(target) else -1",
        "langSlug": "python"
      }
    ],
    "JTZ2SYco": [
      {
        "code": "class Solution {\n    public int minStickers(String[] stickers, String target) {\n        int N = target.length();\n        int[] dp = new int[1 << N];\n        for (int i = 1; i < 1 << N; i++) dp[i] = -1;\n\n        for (int state = 0; state < 1 << N; state++) {\n            if (dp[state] == -1) continue;\n            for (String sticker: stickers) {\n                int now = state;\n                for (char letter: sticker.toCharArray()) {\n                    for (int i = 0; i < N; i++) {\n                        if (((now >> i) & 1) == 1) continue;\n                        if (target.charAt(i) == letter) {\n                            now |= 1 << i;\n                            break;\n                        }\n                    }\n                }\n                if (dp[now] == -1 || dp[now] > dp[state] + 1) {\n                    dp[now] = dp[state] + 1;\n                }\n            }\n        }\n        return dp[(1 << N) - 1];\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minStickers(self, stickers, target):\n        t_count = collections.Counter(target)\n        A = [collections.Counter(sticker) & t_count\n             for sticker in stickers]\n\n        for i in range(len(A) - 1, -1, -1):\n            if any(A[i] == A[i] & A[j] for j in range(len(A)) if i != j):\n                A.pop(i)\n\n        stickers = [\"\".join(s_count.elements()) for s_count in A]\n        dp = [-1] * (1 << len(target))\n        dp[0] = 0\n        for state in xrange(1 << len(target)):\n            if dp[state] == -1: continue\n            for sticker in stickers:\n                now = state\n                for letter in sticker:\n                    for i, c in enumerate(target):\n                        if (now >> i) & 1: continue\n                        if c == letter:\n                            now |= 1 << i\n                            break\n                if dp[now] == -1 or dp[now] > dp[state] + 1:\n                    dp[now] = dp[state] + 1\n\n        return dp[-1]\n",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Dynamic Programming",
    "Backtracking"
  ]
}