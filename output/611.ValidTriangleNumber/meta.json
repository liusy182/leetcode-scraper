{
  "id": "611",
  "title": "Valid Triangle Number",
  "slug": "valid-triangle-number",
  "difficulty": "Medium",
  "likes": 685,
  "dislikes": 80,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"3Sum Smaller\", \"titleSlug\": \"3sum-smaller\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "165",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "RNWbLEyd": [
      {
        "code": "public class Solution {\n    public int triangleNumber(int[] nums) {\n        int count = 0;\n        for (int i = 0; i < nums.length - 2; i++) {\n            for (int j = i + 1; j < nums.length - 1; j++) {\n                for (int k = j + 1; k < nums.length; k++) {\n                    if (nums[i] + nums[j] > nums[k] && nums[i] + nums[k] > nums[j] && nums[j] + nums[k] > nums[i])\n                        count++;\n                }\n            }\n \u00a0 \u00a0 \u00a0 \u00a0} I\n \u00a0 \u00a0 \u00a0 \u00a0return count;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "xn8dMtEH": [
      {
        "code": "public class Solution {\n    int binarySearch(int nums[], int l, int r, int x) {\n        while (r >= l && r < nums.length) {\n            int mid = (l + r) / 2;\n            if (nums[mid] >= x)\n                r = mid - 1;\n            else\n                l = mid + 1;\n        }\n        return l;\n    }\n    public int triangleNumber(int[] nums) {\n        int count = 0;\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 2; i++) {\n            int k = i + 2;\n            for (int j = i + 1; j < nums.length - 1 && nums[i] != 0; j++) {\n                k = binarySearch(nums, k, nums.length - 1, nums[i] + nums[j]);\n                count += k - j - 1;\n            }\n        }\n        return count;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "Djhygc6q": [
      {
        "code": "public class Solution {\n    public int triangleNumber(int[] nums) {\n        int count = 0;\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 2; i++) {\n            int k = i + 2;\n            for (int j = i + 1; j < nums.length - 1 && nums[i] != 0; j++) {\n                while (k < nums.length && nums[i] + nums[j] > nums[k])\n                    k++;\n                count += k - j - 1;\n            }\n        }\n        return count;\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Array"
  ]
}