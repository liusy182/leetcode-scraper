{
  "id": "763",
  "title": "Partition Labels",
  "slug": "partition-labels",
  "difficulty": "Medium",
  "likes": 1213,
  "dislikes": 63,
  "hints": [
    "Try to greedily choose the smallest partition that includes the first letter.  If you have something like \"abaccbdeffed\", then you might need to add b.  You can use an map like \"last['b'] = 5\" to help you expand the width of your partition."
  ],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "374",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "sSLPrXHh": [
      {
        "code": "class Solution {\n    public List<Integer> partitionLabels(String S) {\n        int[] last = new int[26];\n        for (int i = 0; i < S.length(); ++i)\n            last[S.charAt(i) - 'a'] = i;\n        \n        int j = 0, anchor = 0;\n        List<Integer> ans = new ArrayList();\n        for (int i = 0; i < S.length(); ++i) {\n            j = Math.max(j, last[S.charAt(i) - 'a']);\n            if (i == j) {\n                ans.add(i - anchor + 1);\n                anchor = i + 1;\n            }\n        }\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def partitionLabels(self, S):\n        last = {c: i for i, c in enumerate(S)}\n        j = anchor = 0\n        ans = []\n        for i, c in enumerate(S):\n            j = max(j, last[c])\n            if i == j:\n                ans.append(i - anchor + 1)\n                anchor = i + 1\n            \n        return ans",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Two Pointers",
    "Greedy"
  ]
}