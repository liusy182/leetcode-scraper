{
  "id": "858",
  "title": "Mirror Reflection",
  "slug": "mirror-reflection",
  "difficulty": "Medium",
  "likes": 144,
  "dislikes": 235,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "494",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "Ds4FZeYo": [
      {
        "code": "class Solution {\n    double EPS = 1e-6;\n\n    public int mirrorReflection(int p, int q) {\n        double x = 0, y = 0;\n        double rx = p, ry = q;    \n\n        // While it hasn't reached a receptor,...\n        while (!( close(x, p) && (close(y, 0) || close(y, p))\n                  || close(x, 0) && close (y, p) )) {\n            // Want smallest t so that some x + rx, y + ry is 0 or p\n            // x + rxt = 0, then t = -x/rx etc.\n            double t = 1e9;\n            if ((-x / rx) > EPS) t = Math.min(t, -x / rx);\n            if ((-y / ry) > EPS) t = Math.min(t, -y / ry);\n            if (((p-x) / rx) > EPS) t = Math.min(t, (p-x) / rx);\n            if (((p-y) / ry) > EPS) t = Math.min(t, (p-y) / ry);\n\n            x += rx * t;\n            y += ry * t;\n\n            if (close(x, p) || close(x, 0)) rx *= -1;\n            if (close(y, p) || close(y, 0)) ry *= -1;\n        }\n\n        if (close(x, p) && close(y, p)) return 1;\n        return close(x, p) ? 0 : 2;\n    }\n\n    public boolean close(double x, double y) {\n        return Math.abs(x - y) < EPS;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def mirrorReflection(self, p, q):\n        from fractions import Fraction as F\n\n        x = y = 0\n        rx, ry = p, q\n        targets = [(p, 0), (p, p), (0, p)]\n\n        while (x, y) not in targets:\n            #Want smallest t so that some x + rx, y + ry is 0 or p\n            #x + rxt = 0, then t = -x/rx etc.\n            t = float('inf')\n            for v in [F(-x,rx), F(-y,ry), F(p-x,rx), F(p-y,ry)]:\n                if v > 0: t = min(t, v)\n\n            x += rx * t\n            y += ry * t\n\n            #update rx, ry\n            if x == p or x == 0: # bounced from east/west wall, so reflect on y axis\n                rx *= -1\n            if y == p or y == 0:\n                ry *= -1\n\n        return 1 if x==y==p else 0 if x==p else 2",
        "langSlug": "python"
      }
    ],
    "srjkydcW": [
      {
        "code": "class Solution {\n\n    public int mirrorReflection(int p, int q) {\n        int g = gcd(p, q);\n        p /= g; p %= 2;\n        q /= g; q %= 2;\n\n        if (p == 1 && q == 1) return 1;\n        return p == 1 ? 0 : 2;\n    }\n\n    public int gcd(int a, int b) {\n        if (a == 0) return b;\n        return gcd(b % a, a);\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def mirrorReflection(self, p, q):\n        from fractions import gcd\n        g = gcd(p, q)\n        p = (p / g) % 2\n        q = (q / g) % 2\n\n        return 1 if p and q else 0 if p else 2",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Math"
  ]
}