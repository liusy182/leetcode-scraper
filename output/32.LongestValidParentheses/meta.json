{
  "id": "32",
  "title": "Longest Valid Parentheses",
  "slug": "longest-valid-parentheses",
  "difficulty": "Hard",
  "likes": 2225,
  "dislikes": 100,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Valid Parentheses\", \"titleSlug\": \"valid-parentheses\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "solution": {
    "id": "74",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "smDecW2X": [
      {
        "code": "public class Solution {\n    public boolean isValid(String s) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                stack.push('(');\n            } else if (!stack.empty() && stack.peek() == '(') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        return stack.empty();\n    }\n    public int longestValidParentheses(String s) {\n        int maxlen = 0;\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = i + 2; j <= s.length(); j+=2) {\n                if (isValid(s.substring(i, j))) {\n                    maxlen = Math.max(maxlen, j - i);\n                }\n            }\n        }\n        return maxlen;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "YGuAh4tp": [
      {
        "code": "public class Solution {\n    public int longestValidParentheses(String s) {\n        int maxans = 0;\n        int dp[] = new int[s.length()];\n        for (int i = 1; i < s.length(); i++) {\n            if (s.charAt(i) == ')') {\n                if (s.charAt(i - 1) == '(') {\n                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;\n                } else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') {\n                    dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;\n                }\n                maxans = Math.max(maxans, dp[i]);\n            }\n        }\n        return maxans;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "A2oPe4yE": [
      {
        "code": "public class Solution {\n\n    public int longestValidParentheses(String s) {\n        int maxans = 0;\n        Stack<Integer> stack = new Stack<>();\n        stack.push(-1);\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if (stack.empty()) {\n                    stack.push(i);\n                } else {\n                    maxans = Math.max(maxans, i - stack.peek());\n                }\n            }\n        }\n        return maxans;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "RsBpRHK7": [
      {
        "code": "public class Solution {\n    public int longestValidParentheses(String s) {\n        int left = 0, right = 0, maxlength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = Math.max(maxlength, 2 * right);\n            } else if (right >= left) {\n                left = right = 0;\n            }\n        }\n        left = right = 0;\n        for (int i = s.length() - 1; i >= 0; i--) {\n            if (s.charAt(i) == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = Math.max(maxlength, 2 * left);\n            } else if (left >= right) {\n                left = right = 0;\n            }\n        }\n        return maxlength;\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "String",
    "Dynamic Programming"
  ]
}