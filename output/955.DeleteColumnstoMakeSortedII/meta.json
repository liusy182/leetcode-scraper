{
  "id": "955",
  "title": "Delete Columns to Make Sorted II",
  "slug": "delete-columns-to-make-sorted-ii",
  "difficulty": "Medium",
  "likes": 143,
  "dislikes": 31,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "634",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "VebVmQZ4": [
      {
        "code": "class Solution {\n    public int minDeletionSize(String[] A) {\n        int N = A.length;\n        int W = A[0].length();\n        int ans = 0;\n\n        // cur : all rows we have written\n        // For example, with A = [\"abc\",\"def\",\"ghi\"] we might have\n        // cur = [\"ab\", \"de\", \"gh\"].\n        String[] cur = new String[N];\n        for (int j = 0; j < W; ++j) {\n            // cur2 : What we potentially can write, including the\n            //        newest column col = [A[i][j] for i]\n            // Eg. if cur = [\"ab\",\"de\",\"gh\"] and col = (\"c\",\"f\",\"i\"),\n            // then cur2 = [\"abc\",\"def\",\"ghi\"].\n            String[] cur2 = Arrays.copyOf(cur, N);\n            for (int i = 0; i < N; ++i)\n                cur2[i] += A[i].charAt(j);\n\n            if (isSorted(cur2))\n                cur = cur2;\n            else\n                ans++;\n        }\n\n        return ans;\n    }\n\n    public boolean isSorted(String[] A) {\n        for (int i = 0; i < A.length - 1; ++i)\n            if (A[i].compareTo(A[i+1]) > 0)\n                return false;\n\n        return true;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minDeletionSize(self, A):\n        def is_sorted(A):\n            return all(A[i] <= A[i+1] for i in xrange(len(A) - 1))\n\n        ans = 0\n        # cur : all rows we have written\n        # For example, with A = [\"abc\",\"def\",\"ghi\"] we might have\n        # cur = [\"ab\", \"de\", \"gh\"].\n        cur = [\"\"] * len(A)  \n\n        for col in zip(*A):\n            # cur2 : What we potentially can write, including the\n            #        newest column 'col'.\n            # Eg. if cur = [\"ab\",\"de\",\"gh\"] and col = (\"c\",\"f\",\"i\"),\n            # then cur2 = [\"abc\",\"def\",\"ghi\"].\n            cur2 = cur[:]\n            for i, letter in enumerate(col):\n                cur2[i] = cur2[i] + letter\n\n            if is_sorted(cur2):\n                cur = cur2\n            else:\n                ans += 1\n\n        return ans",
        "langSlug": "python"
      }
    ],
    "bbGofp6M": [
      {
        "code": "class Solution {\n    public int minDeletionSize(String[] A) {\n        int N = A.length;\n        int W = A[0].length();\n        // cuts[j] is true : we don't need to check any new A[i][j] <= A[i][j+1]\n        boolean[] cuts = new boolean[N-1];\n\n        int ans = 0;\n        search: for (int j = 0; j < W; ++j) {\n            // Evaluate whether we can keep this column\n            for (int i = 0; i < N-1; ++i)\n                if (!cuts[i] && A[i].charAt(j) > A[i+1].charAt(j)) {\n                    // Can't keep the column - delete and continue\n                    ans++;\n                    continue search;\n                }\n\n            // Update 'cuts' information\n            for (int i = 0; i < N-1; ++i)\n                if (A[i].charAt(j) < A[i+1].charAt(j))\n                    cuts[i] = true;\n        }\n\n        return ans;\n    }\n}\n",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minDeletionSize(self, A):\n        # cuts[i] is True : we don't need to check col[i] <= col[i+1]\n        cuts = [False] * (len(A) - 1)\n\n        ans = 0\n        for col in zip(*A):\n            if all(cuts[i] or col[i] <= col[i+1] for i in xrange(len(col) - 1)):\n                for i in xrange(len(col) - 1):\n                    if col[i] < col[i+1]:\n                        cuts[i] = True\n            else:\n                ans += 1\n        return ans",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Greedy"
  ]
}