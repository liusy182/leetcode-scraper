{
  "id": "287",
  "title": "Find the Duplicate Number",
  "slug": "find-the-duplicate-number",
  "difficulty": "Medium",
  "likes": 2855,
  "dislikes": 324,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"First Missing Positive\", \"titleSlug\": \"first-missing-positive\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Linked List Cycle II\", \"titleSlug\": \"linked-list-cycle-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Missing Number\", \"titleSlug\": \"missing-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Set Mismatch\", \"titleSlug\": \"set-mismatch\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "solution": {
    "id": "338",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "bQGYqfgj": [
      {
        "code": "class Solution {\n    public int findDuplicate(int[] nums) {\n        Arrays.sort(nums);\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] == nums[i-1]) {\n                return nums[i];\n            }\n        }\n\n        return -1;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def findDuplicate(self, nums):\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1]:\n                return nums[i]",
        "langSlug": "python3"
      }
    ],
    "jP4YUkB7": [
      {
        "code": "class Solution {\n    public int findDuplicate(int[] nums) {\n        Set<Integer> seen = new HashSet<Integer>();\n        for (int num : nums) {\n            if (seen.contains(num)) {\n                return num;\n            }\n            seen.add(num);\n        }\n\n        return -1;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def findDuplicate(self, nums):\n        seen = set()\n        for num in nums:\n            if num in seen:\n                return num\n            seen.add(num)",
        "langSlug": "python3"
      }
    ],
    "RMBz6AQR": [
      {
        "code": "class Solution {\n    public int findDuplicate(int[] nums) {\n        // Find the intersection point of the two runners.\n        int tortoise = nums[0];\n        int hare = nums[0];\n        do {\n            tortoise = nums[tortoise];\n            hare = nums[nums[hare]];\n        } while (tortoise != hare);\n\n        // Find the \"entrance\" to the cycle.\n        int ptr1 = nums[0];\n        int ptr2 = tortoise;\n        while (ptr1 != ptr2) {\n            ptr1 = nums[ptr1];\n            ptr2 = nums[ptr2];\n        }\n\n        return ptr1;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def findDuplicate(self, nums):\n        # Find the intersection point of the two runners.\n        tortoise = nums[0]\n        hare = nums[0]\n        while True:\n            tortoise = nums[tortoise]\n            hare = nums[nums[hare]]\n            if tortoise == hare:\n                break\n        \n        # Find the \"entrance\" to the cycle.\n        ptr1 = nums[0]\n        ptr2 = tortoise\n        while ptr1 != ptr2:\n            ptr1 = nums[ptr1]\n            ptr2 = nums[ptr2]\n        \n        return ptr1",
        "langSlug": "python3"
      }
    ]
  },
  "topicTags": [
    "Array",
    "Two Pointers",
    "Binary Search"
  ]
}