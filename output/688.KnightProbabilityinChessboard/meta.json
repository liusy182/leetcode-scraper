{
  "id": "688",
  "title": "Knight Probability in Chessboard",
  "slug": "knight-probability-in-chessboard",
  "difficulty": "Medium",
  "likes": 454,
  "dislikes": 94,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Out of Boundary Paths\", \"titleSlug\": \"out-of-boundary-paths\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "254",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "VTNPLt6H": [
      {
        "code": "class Solution {\n    public double knightProbability(int N, int K, int sr, int sc) {\n        double[][] dp = new double[N][N];\n        int[] dr = new int[]{2, 2, 1, 1, -1, -1, -2, -2};\n        int[] dc = new int[]{1, -1, 2, -2, 2, -2, 1, -1};\n\n        dp[sr][sc] = 1;\n        for (; K > 0; K--) {\n            double[][] dp2 = new double[N][N];\n            for (int r = 0; r < N; r++) {\n                for (int c = 0; c < N; c++) {\n                    for (int k = 0; k < 8; k++) {\n                        int cr = r + dr[k];\n                        int cc = c + dc[k];\n                        if (0 <= cr && cr < N && 0 <= cc && cc < N) {\n                            dp2[cr][cc] += dp[r][c] / 8.0;\n                        }\n                    }\n                }\n            }\n            dp = dp2;\n        }\n        double ans = 0.0;\n        for (double[] row: dp) {\n            for (double x: row) ans += x;\n        }\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def knightProbability(self, N, K, r, c):\n        dp = [[0] * N for _ in xrange(N)]\n        dp[r][c] = 1\n        for _ in xrange(K):\n            dp2 = [[0] * N for _ in xrange(N)]\n            for r, row in enumerate(dp):\n                for c, val in enumerate(row):\n                    for dr, dc in ((2,1),(2,-1),(-2,1),(-2,-1),\n                                   (1,2),(1,-2),(-1,2),(-1,-2)):\n                        if 0 <= r + dr < N and 0 <= c + dc < N:\n                            dp2[r+dr][c+dc] += val / 8.0\n            dp = dp2\n\n        return sum(map(sum, dp))\n\n",
        "langSlug": "python"
      }
    ],
    "ARu5yUUd": [
      {
        "code": "class Solution {\n    public double knightProbability(int N, int K, int sr, int sc) {\n        int[] dr = new int[]{-1, -1, 1, 1, -2, -2, 2, 2};\n        int[] dc = new int[]{2, -2, 2, -2, 1, -1, 1, -1};\n\n        int[] index = new int[N * N];\n        int t = 0;\n        for (int r = 0; r < N; r++) {\n            for (int c = 0; c < N; c++) {\n                if (r * N + c == canonical(r, c, N)) {\n                    index[r * N + c] = t;\n                    t++;\n                } else {\n                    index[r * N + c] = index[canonical(r, c, N)];\n                }\n            }\n        }\n\n        double[][] T = new double[t][t];\n        int curRow = 0;\n        for (int r = 0; r < N; r++) {\n            for (int c = 0; c < N; c++) {\n                if (r * N + c == canonical(r, c, N)) {\n                    for (int k = 0; k < 8; k++) {\n                        int cr = r + dr[k], cc = c + dc[k];\n                        if (0 <= cr && cr < N && 0 <= cc && cc < N) {\n                            T[curRow][index[canonical(cr, cc, N)]] += 0.125;\n                        }\n                    }\n                    curRow++;\n                }\n            }\n        }\n\n        double[] row = matrixExpo(T, K)[index[sr*N + sc]];\n        double ans = 0.0;\n        for (double x: row) ans += x;\n        return ans;\n    }\n\n    public int canonical(int r, int c, int N) {\n        if (2*r > N) r = N-1-r;\n        if (2*c > N) c = N-1-c;\n        if (r > c) {\n            int t = r;\n            r = c;\n            c = t;\n        }\n        return r * N + c;\n    }\n    public double[][] matrixMult(double[][] A, double[][] B) {\n        double[][] ans = new double[A.length][A.length];\n        for (int i = 0; i < A.length; i++) {\n            for (int j = 0; j < B[0].length; j++) {\n                for (int k = 0; k < B.length; k++) {\n                    ans[i][j] += A[i][k] * B[k][j];\n                }\n            }\n        }\n        return ans;\n    }\n    public double[][] matrixExpo(double[][] A, int pow) {\n        double[][] ans = new double[A.length][A.length];\n        for (int i = 0; i < A.length; i++) ans[i][i] = 1;\n        if (pow == 0) return ans;\n        if (pow == 1) return A;\n        if (pow % 2 == 1) return matrixMult(matrixExpo(A, pow-1), A);\n        double[][] B = matrixExpo(A, pow / 2);\n        return matrixMult(B, B);\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def knightProbability(self, N, K, sr, sc):\n        def canonical(r, c):\n            if 2 * r > N: r = N - 1 - r\n            if 2 * c > N: c = N - 1 - c\n            if r > c: r, c = c, r\n            return r*N + c\n\n        def matrix_mult(A, B):\n            ZB = zip(*B)\n            return [[sum(a * b for a, b in zip(row, col))\n                     for col in ZB] for row in A]\n\n        def matrix_expo(A, K):\n            if K == 0:\n                return [[+(i==j) for j in xrange(len(A))]\n                        for i in xrange(len(A))]\n            if K == 1:\n                return A\n            elif K % 2:\n                return matrix_mult(matrix_expo(A, K-1), A)\n            B = matrix_expo(A, K/2)\n            return matrix_mult(B, B)\n\n        index = [0] * (N*N)\n        t = 0\n        for r in xrange(N):\n            for c in xrange(N):\n                if r*N + c == canonical(r, c):\n                    index[r*N + c] = t\n                    t += 1\n                else:\n                    index[r*N + c] = index[canonical(r, c)]\n\n        T = []\n        for r in xrange(N):\n            for c in xrange(N):\n                if r*N + c == canonical(r, c):\n                    row = [0] * t\n                    for dr, dc in ((2,1),(2,-1),(-2,1),(-2,-1),\n                                    (1,2),(1,-2),(-1,2),(-1,-2)):\n                        if 0 <= r+dr < N and 0 <= c+dc < N:\n                            row[index[(r+dr)*N + c+dc]] += 0.125\n                    T.append(row)\n\n        Tk = matrix_expo(T, K)\n        i = index[sr * N + sc]\n        return sum(Tk[i])",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Dynamic Programming"
  ],
  "images": {
    "knight-probability-in-chessboard_1.png": "https://assets.leetcode.com/uploads/2018/10/12/knight.png"
  }
}