{
  "id": "890",
  "title": "Find and Replace Pattern",
  "slug": "find-and-replace-pattern",
  "difficulty": "Medium",
  "likes": 431,
  "dislikes": 43,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "534",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "9TL6xVWm": [
      {
        "code": "class Solution {\n    public List<String> findAndReplacePattern(String[] words, String pattern) {\n        List<String> ans = new ArrayList();\n        for (String word: words)\n            if (match(word, pattern))\n                ans.add(word);\n        return ans;\n    }\n\n    public boolean match(String word, String pattern) {\n        Map<Character, Character> m1 = new HashMap();\n        Map<Character, Character> m2 = new HashMap();\n\n        for (int i = 0; i < word.length(); ++i) {\n            char w = word.charAt(i);\n            char p = pattern.charAt(i);\n            if (!m1.containsKey(w)) m1.put(w, p);\n            if (!m2.containsKey(p)) m2.put(p, w);\n            if (m1.get(w) != p || m2.get(p) != w)\n                return false;\n        }\n\n        return true;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def findAndReplacePattern(self, words, pattern):\n        def match(word):\n            m1, m2 = {}, {}\n            for w, p in zip(word, pattern):\n                if w not in m1: m1[w] = p\n                if p not in m2: m2[p] = w\n                if (m1[w], m2[p]) != (p, w):\n                    return False\n            return True\n\n        return filter(match, words)",
        "langSlug": "python"
      }
    ],
    "3vbeWuoq": [
      {
        "code": "class Solution {\n    public List<String> findAndReplacePattern(String[] words, String pattern) {\n        List<String> ans = new ArrayList();\n        for (String word: words)\n            if (match(word, pattern))\n                ans.add(word);\n        return ans;\n    }\n\n    public boolean match(String word, String pattern) {\n        Map<Character, Character> M = new HashMap();\n        for (int i = 0; i < word.length(); ++i) {\n            char w = word.charAt(i);\n            char p = pattern.charAt(i);\n            if (!M.containsKey(w)) M.put(w, p);\n            if (M.get(w) != p) return false;\n        }\n\n        boolean[] seen = new boolean[26];\n        for (char p: M.values()) {\n            if (seen[p - 'a']) return false;\n            seen[p - 'a'] = true;\n        }\n        return true;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def findAndReplacePattern(self, words, pattern):\n        def match(word):\n            P = {}\n            for x, y in zip(pattern, word):\n                if P.setdefault(x, y) != y:\n                    return False\n            return len(set(P.values())) == len(P.values())\n\n        return filter(match, words)",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "String"
  ]
}