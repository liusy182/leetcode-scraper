{
  "id": "878",
  "title": "Nth Magical Number",
  "slug": "nth-magical-number",
  "difficulty": "Hard",
  "likes": 121,
  "dislikes": 42,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "522",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "noAa9JNU": [
      {
        "code": "class Solution {\npublic:\n    int nthMagicalNumber(int N, int A, int B) {\n        int MOD = 1e9 + 7;\n        int L = A / gcd(A, B) * B;\n        int M = L / A + L / B - 1;\n        int q = N / M, r = N % M;\n\n        long ans = (long) q * L % MOD;\n        if (r == 0)\n            return (int) ans;\n\n        int heads[2] = {A, B};\n        for (int i = 0; i < r - 1; ++i) {\n            if (heads[0] <= heads[1])\n                heads[0] += A;\n            else\n                heads[1] += B;\n        }\n\n        ans += min(heads[0], heads[1]);\n        return (int) (ans % MOD);\n    }\n\n    int gcd(int x, int y) {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n};",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int nthMagicalNumber(int N, int A, int B) {\n        int MOD = 1_000_000_007;\n        int L = A / gcd(A, B) * B;\n        int M = L / A + L / B - 1;\n        int q = N / M, r = N % M;\n\n        long ans = (long) q * L % MOD;\n        if (r == 0)\n            return (int) ans;\n\n        int[] heads = new int[]{A, B};\n        for (int i = 0; i < r - 1; ++i) {\n            if (heads[0] <= heads[1])\n                heads[0] += A;\n            else\n                heads[1] += B;\n        }\n\n        ans += Math.min(heads[0], heads[1]);\n        return (int) (ans % MOD);\n    }\n\n    public int gcd(int x, int y) {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def nthMagicalNumber(self, N, A, B):\n        from fractions import gcd\n        MOD = 10**9 + 7\n\n        L = A / gcd(A, B) * B\n        M = L / A + L / B - 1\n        q, r = divmod(N, M)\n\n        if r == 0:\n            return q * L % MOD\n\n        heads = [A, B]\n        for _ in xrange(r - 1):\n            if heads[0] <= heads[1]:\n                heads[0] += A\n            else:\n                heads[1] += B\n\n        return (q * L + min(heads)) % MOD",
        "langSlug": "python"
      },
      {
        "code": "var nthMagicalNumber = function(N, A, B) {\n    gcd = (x, y) => {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n\n    const MOD = 1000000007;\n    const L = A / gcd(A, B) * B;\n    const M = L / A + L / B - 1;\n    const q = Math.trunc(N / M), r = N % M;\n\n    let ans = q * L % MOD;\n    if (r == 0)\n        return ans;\n\n    let heads = [A, B];\n    for (let i = 0; i < r - 1; ++i) {\n        if (heads[0] <= heads[1])\n            heads[0] += A;\n        else\n            heads[1] += B;\n    }\n\n    ans += Math.min(heads[0], heads[1]);\n    return ans % MOD;\n};",
        "langSlug": "javascript"
      }
    ],
    "3erxMBCQ": [
      {
        "code": "class Solution {\npublic:\n    int nthMagicalNumber(int N, int A, int B) {\n        int MOD = 1e9 + 7;\n        int L = A / gcd(A, B) * B;\n\n        long lo = 0;\n        long hi = (long) 1e15;\n        while (lo < hi) {\n            long mi = lo + (hi - lo) / 2;\n            // If there are not enough magic numbers below mi...\n            if (mi / A + mi / B - mi / L < N)\n                lo = mi + 1;\n            else\n                hi = mi;\n        }\n\n        return (int) (lo % MOD);\n    }\n\n    int gcd(int x, int y) {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n};",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int nthMagicalNumber(int N, int A, int B) {\n        int MOD = 1_000_000_007;\n        int L = A / gcd(A, B) * B;\n\n        long lo = 0;\n        long hi = (long) 1e15;\n        while (lo < hi) {\n            long mi = lo + (hi - lo) / 2;\n            // If there are not enough magic numbers below mi...\n            if (mi / A + mi / B - mi / L < N)\n                lo = mi + 1;\n            else\n                hi = mi;\n        }\n\n        return (int) (lo % MOD);\n    }\n\n    public int gcd(int x, int y) {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def nthMagicalNumber(self, N, A, B):\n        from fractions import gcd\n        MOD = 10**9 + 7\n        L = A / gcd(A,B) * B\n\n        def magic_below_x(x):\n            #How many magical numbers are <= x?\n            return x / A + x / B - x / L\n\n        lo = 0\n        hi = 10**15\n        while lo < hi:\n            mi = (lo + hi) / 2\n            if magic_below_x(mi) < N:\n                lo = mi + 1\n            else:\n                hi = mi\n\n        return lo % MOD",
        "langSlug": "python"
      },
      {
        "code": "var nthMagicalNumber = function(N, A, B) {\n    gcd = (x, y) => {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n\n    const MOD = 1000000007;\n    const L = A / gcd(A, B) * B;\n\n    let lo = 0;\n    let hi = 1e15;\n    while (lo < hi) {\n        let mi = lo + Math.trunc((hi - lo) / 2);\n        // If there are not enough magic numbers below mi...\n        if (Math.trunc(mi/A) + Math.trunc(mi/B) - Math.trunc(mi/L) < N)\n            lo = mi + 1;\n        else\n            hi = mi;\n    }\n\n    return lo % MOD;\n};",
        "langSlug": "javascript"
      }
    ]
  },
  "topicTags": [
    "Math",
    "Binary Search"
  ]
}