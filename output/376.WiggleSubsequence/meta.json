{
  "id": "376",
  "title": "Wiggle Subsequence",
  "slug": "wiggle-subsequence",
  "difficulty": "Medium",
  "likes": 611,
  "dislikes": 51,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "60",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "JXWefkVB": [
      {
        "code": "public class Solution {\n    private int calculate(int[] nums, int index, boolean isUp) {\n        int maxcount = 0;\n        for (int i = index + 1; i < nums.length; i++) {\n            if ((isUp && nums[i] > nums[index]) || (!isUp && nums[i] < nums[index]))\n                maxcount = Math.max(maxcount, 1 + calculate(nums, i, !isUp));\n        }\n        return maxcount;\n    }\n\n    public int wiggleMaxLength(int[] nums) {\n        if (nums.length < 2)\n            return nums.length;\n        return 1 + Math.max(calculate(nums, 0, true), calculate(nums, 0, false));\n    }\n}",
        "langSlug": "java"
      }
    ],
    "5DeX9SiP": [
      {
        "code": "public class Solution {\n    public int wiggleMaxLength(int[] nums) {\n        if (nums.length < 2)\n            return nums.length;\n        int[] up = new int[nums.length];\n        int[] down = new int[nums.length];\n        for (int i = 1; i < nums.length; i++) {\n            for(int j = 0; j < i; j++) {\n                if (nums[i] > nums[j]) {\n                    up[i] = Math.max(up[i],down[j] + 1);\n                } else if (nums[i] < nums[j]) {\n                    down[i] = Math.max(down[i],up[j] + 1);\n                }\n            }\n        }\n        return 1 + Math.max(down[nums.length - 1], up[nums.length - 1]);\n    }\n}",
        "langSlug": "java"
      }
    ],
    "iKGkFpFG": [
      {
        "code": "public class Solution {\n    public int wiggleMaxLength(int[] nums) {\n        if (nums.length < 2)\n            return nums.length;\n        int[] up = new int[nums.length];\n        int[] down = new int[nums.length];\n        up[0] = down[0] = 1;\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] > nums[i - 1]) {\n                up[i] = down[i - 1] + 1;\n                down[i] = down[i - 1];\n            } else if (nums[i] < nums[i - 1]) {\n                down[i] = up[i - 1] + 1;\n                up[i] = up[i - 1];\n            } else {\n                down[i] = down[i - 1];\n                up[i] = up[i - 1];\n            }\n        }\n        return Math.max(down[nums.length - 1], up[nums.length - 1]);\n    }\n}",
        "langSlug": "java"
      }
    ],
    "hUCEjR4D": [
      {
        "code": "public class Solution {\n    public int wiggleMaxLength(int[] nums) {\n        if (nums.length < 2)\n            return nums.length;\n        int down = 1, up = 1;\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] > nums[i - 1])\n                up = down + 1;\n            else if (nums[i] < nums[i - 1])\n                down = up + 1;\n        }\n        return Math.max(down, up);\n    }\n}",
        "langSlug": "java"
      }
    ],
    "AqoaR5Ks": [
      {
        "code": "public class Solution {\n    public int wiggleMaxLength(int[] nums) {\n        if (nums.length < 2)\n            return nums.length;\n        int prevdiff = nums[1] - nums[0];\n        int count = prevdiff != 0 ? 2 : 1;\n        for (int i = 2; i < nums.length; i++) {\n            int diff = nums[i] - nums[i - 1];\n            if ((diff > 0 && prevdiff <= 0) || (diff < 0 && prevdiff >= 0)) {\n                count++;\n                prevdiff = diff;\n            }\n        }\n        return count;\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Dynamic Programming",
    "Greedy"
  ]
}