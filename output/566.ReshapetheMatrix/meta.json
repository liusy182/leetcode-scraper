{
  "id": "566",
  "title": "Reshape the Matrix",
  "slug": "reshape-the-matrix",
  "difficulty": "Easy",
  "likes": 618,
  "dislikes": 90,
  "hints": [
    "Do you know how 2d matrix is stored in 1d memory? Try to map 2-dimensions into one.",
    "M[i][j]=M[n*i+j] , where n is the number of cols. \r\nThis is the one way of converting 2-d indices into one 1-d index.  \r\nNow, how will you convert 1-d index into 2-d indices?",
    "Try to use division and modulus to convert 1-d index into 2-d indices.",
    "M[i] =>  M[n/i][n%i]   Will it result in right mapping? Take some example and check this formulae."
  ],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "120",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "QiYrHtjz": [
      {
        "code": "\npublic class Solution {\n    public int[][] matrixReshape(int[][] nums, int r, int c) {\n        int[][] res = new int[r][c];\n        if (nums.length == 0 || r * c != nums.length * nums[0].length)\n            return nums;\n        int count = 0;\n        Queue < Integer > queue = new LinkedList < > ();\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = 0; j < nums[0].length; j++) {\n                queue.add(nums[i][j]);\n            }\n        }\n        for (int i = 0; i < r; i++) {\n            for (int j = 0; j < c; j++) {\n                res[i][j] = queue.remove();\n            }\n        }\n        return res;\n    }\n}\n",
        "langSlug": "java"
      }
    ],
    "JvBHJ8mJ": [
      {
        "code": "public class Solution {\n    public int[][] matrixReshape(int[][] nums, int r, int c) {\n        int[][] res = new int[r][c];\n        if (nums.length == 0 || r * c != nums.length * nums[0].length)\n            return nums;\n        int rows = 0, cols = 0;\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = 0; j < nums[0].length; j++) {\n                res[rows][cols] = nums[i][j];\n                cols++;\n                if (cols == c) {\n                    rows++;\n                    cols = 0;\n                }\n            }\n        }\n        return res;\n    }\n}\n",
        "langSlug": "java"
      }
    ],
    "3U3C5txm": [
      {
        "code": "public class Solution {\n    public int[][] matrixReshape(int[][] nums, int r, int c) {\n        int[][] res = new int[r][c];\n        if (nums.length == 0 || r * c != nums.length * nums[0].length)\n            return nums;\n        int count = 0;\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = 0; j < nums[0].length; j++) {\n                res[count / c][count % c] = nums[i][j];\n                count++;\n            }\n        }\n        return res;\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Array"
  ]
}