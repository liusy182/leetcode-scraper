{
  "id": "736",
  "title": "Parse Lisp Expression",
  "slug": "parse-lisp-expression",
  "difficulty": "Hard",
  "likes": 180,
  "dislikes": 152,
  "hints": [
    "* If the expression starts with a digit or '-', it's an integer: return it.\r\n\r\n* If the expression starts with a letter, it's a variable.  Recall it by checking the current scope in reverse order.\r\n\r\n* Otherwise, group the tokens (variables or expressions) within this expression by counting the \"balance\" `bal` of the occurrences of `'('` minus the number of occurrences of `')'`.  When the balance is zero, we have ended a token.  For example, `(add 1 (add 2 3))` should have tokens `'1'` and `'(add 2 3)'`.\r\n\r\n* For add and mult expressions, evaluate each token and return the addition or multiplication of them.\r\n\r\n* For let expressions, evaluate each expression sequentially and assign it to the variable in the current scope, then return the evaluation of the final expression."
  ],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Ternary Expression Parser\", \"titleSlug\": \"ternary-expression-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Atoms\", \"titleSlug\": \"number-of-atoms\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator IV\", \"titleSlug\": \"basic-calculator-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "solution": {
    "id": "305",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "NPtxmW53": [
      {
        "code": "class Solution {\n    ArrayList<Map<String, Integer>> scope;\n    public Solution() {\n        scope = new ArrayList();\n        scope.add(new HashMap());\n    }\n\n    public int evaluate(String expression) {\n        scope.add(new HashMap());\n        int ans = evaluate_inner(expression);\n        scope.remove(scope.size() - 1);\n        return ans;\n    }\n\n    public int evaluate_inner(String expression) {\n        if (expression.charAt(0) != '(') {\n            if (Character.isDigit(expression.charAt(0)) || expression.charAt(0) == '-')\n                return Integer.parseInt(expression);\n            for (int i = scope.size() - 1; i >= 0; --i) {\n                if (scope.get(i).containsKey(expression))\n                    return scope.get(i).get(expression);\n            }\n        }\n\n        List<String> tokens = parse(expression.substring(\n                expression.charAt(1) == 'm' ? 6 : 5, expression.length() - 1));\n        if (expression.startsWith(\"add\", 1)) {\n            return evaluate(tokens.get(0)) + evaluate(tokens.get(1));\n        } else if (expression.startsWith(\"mult\", 1)) {\n            return evaluate(tokens.get(0)) * evaluate(tokens.get(1));\n        } else {\n            for (int j = 1; j < tokens.size(); j += 2) {\n                scope.get(scope.size() - 1).put(tokens.get(j-1), evaluate(tokens.get(j)));\n            }\n            return evaluate(tokens.get(tokens.size() - 1));\n        }\n    }\n\n    public List<String> parse(String expression) {\n        List<String> ans = new ArrayList();\n        int bal = 0;\n        StringBuilder buf = new StringBuilder();\n        for (String token: expression.split(\" \")) {\n            for (char c: token.toCharArray()) {\n                if (c == '(') bal++;\n                if (c == ')') bal--;\n            }\n            if (buf.length() > 0) buf.append(\" \");\n            buf.append(token);\n            if (bal == 0) {\n                ans.add(new String(buf));\n                buf = new StringBuilder();\n            }\n        }\n        if (buf.length() > 0)\n            ans.add(new String(buf));\n\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "def implicit_scope(func):\n    def wrapper(*args):\n        args[0].scope.append({})\n        ans = func(*args)\n        args[0].scope.pop()\n        return ans\n    return wrapper\n\nclass Solution(object):\n    def __init__(self):\n        self.scope = [{}]\n\n    @implicit_scope\n    def evaluate(self, expression):\n        if not expression.startswith('('):\n            if expression[0].isdigit() or expression[0] == '-':\n                return int(expression)\n            for local in reversed(self.scope):\n                if expression in local: return local[expression]\n\n        tokens = list(self.parse(expression[5 + (expression[1] == 'm'): -1]))\n        if expression.startswith('(add'):\n            return self.evaluate(tokens[0]) + self.evaluate(tokens[1])\n        elif expression.startswith('(mult'):\n            return self.evaluate(tokens[0]) * self.evaluate(tokens[1])\n        else:\n            for j in xrange(1, len(tokens), 2):\n                self.scope[-1][tokens[j-1]] = self.evaluate(tokens[j])\n            return self.evaluate(tokens[-1])\n\n    def parse(self, expression):\n        bal = 0\n        buf = []\n        for token in expression.split():\n            bal += token.count('(') - token.count(')')\n            buf.append(token)\n            if bal == 0:\n                yield \" \".join(buf)\n                buf = []\n        if buf:\n            yield \" \".join(buf)",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "String"
  ]
}