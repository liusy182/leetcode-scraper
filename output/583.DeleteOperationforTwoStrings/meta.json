{
  "id": "583",
  "title": "Delete Operation for Two Strings",
  "slug": "delete-operation-for-two-strings",
  "difficulty": "Medium",
  "likes": 773,
  "dislikes": 20,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Edit Distance\", \"titleSlug\": \"edit-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum ASCII Delete Sum for Two Strings\", \"titleSlug\": \"minimum-ascii-delete-sum-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Common Subsequence\", \"titleSlug\": \"longest-common-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "137",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "QCLZ3ajV": [
      {
        "code": "\npublic class Solution {\n    public int minDistance(String s1, String s2) {\n        return s1.length() + s2.length() - 2 * lcs(s1, s2, s1.length(), s2.length());\n    }\n    public int lcs(String s1, String s2, int m, int n) {\n        if (m == 0 || n == 0)\n            return 0;\n        if (s1.charAt(m - 1) == s2.charAt(n - 1))\n            return 1 + lcs(s1, s2, m - 1, n - 1);\n        else\n            return Math.max(lcs(s1, s2, m, n - 1), lcs(s1, s2, m - 1, n));\n    }\n}\n",
        "langSlug": "java"
      }
    ],
    "dPT69gpC": [
      {
        "code": "\npublic class Solution {\n    public int minDistance(String s1, String s2) {\n        int[][] memo = new int[s1.length() + 1][s2.length() + 1];\n        return s1.length() + s2.length() - 2 * lcs(s1, s2, s1.length(), s2.length(), memo);\n    }\n    public int lcs(String s1, String s2, int m, int n, int[][] memo) {\n        if (m == 0 || n == 0)\n            return 0;\n        if (memo[m][n] > 0)\n            return memo[m][n];\n        if (s1.charAt(m - 1) == s2.charAt(n - 1))\n            memo[m][n] = 1 + lcs(s1, s2, m - 1, n - 1, memo);\n        else\n            memo[m][n] = Math.max(lcs(s1, s2, m, n - 1, memo), lcs(s1, s2, m - 1, n, memo));\n        return memo[m][n];\n    }\n}\n",
        "langSlug": "java"
      }
    ],
    "xQZCgSyw": [
      {
        "code": "public class Solution {\n    public int minDistance(String s1, String s2) {\n        int[][] dp = new int[s1.length() + 1][s2.length() + 1];\n        for (int i = 0; i <= s1.length(); i++) {\n            for (int j = 0; j <= s2.length(); j++) {\n                if (i == 0 || j == 0)\n                    continue;\n                if (s1.charAt(i - 1) == s2.charAt(j - 1))\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                else\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n        return s1.length() + s2.length() - 2 * dp[s1.length()][s2.length()];\n    }\n}",
        "langSlug": "java"
      }
    ],
    "aPU8b3Fd": [
      {
        "code": "public class Solution {\n    public int minDistance(String s1, String s2) {\n        int[][] dp = new int[s1.length() + 1][s2.length() + 1];\n        for (int i = 0; i <= s1.length(); i++) {\n            for (int j = 0; j <= s2.length(); j++) {\n                if (i == 0 || j == 0)\n                    dp[i][j] = i + j;\n                else if (s1.charAt(i - 1) == s2.charAt(j - 1))\n                    dp[i][j] = dp[i - 1][j - 1];\n                else\n                    dp[i][j] = 1 + Math.min(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n        return dp[s1.length()][s2.length()];\n    }\n}",
        "langSlug": "java"
      }
    ],
    "jfeuFUeS": [
      {
        "code": "public class Solution {\n    public int minDistance(String s1, String s2) {\n        int[] dp = new int[s2.length() + 1];\n        for (int i = 0; i <= s1.length(); i++) {\n            int[] temp=new int[s2.length()+1];\n            for (int j = 0; j <= s2.length(); j++) {\n                if (i == 0 || j == 0)\n                    temp[j] = i + j;\n                else if (s1.charAt(i - 1) == s2.charAt(j - 1))\n                    temp[j] = dp[j - 1];\n                else\n                    temp[j] = 1 + Math.min(dp[j], temp[j - 1]);\n            }\n            dp=temp;\n        }\n        return dp[s2.length()];\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "String"
  ]
}