{
  "id": "854",
  "title": "K-Similar Strings",
  "slug": "k-similar-strings",
  "difficulty": "Hard",
  "likes": 197,
  "dislikes": 22,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Couples Holding Hands\", \"titleSlug\": \"couples-holding-hands\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "solution": {
    "id": "491",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "FcbDkuSz": [
      {
        "code": "class Solution {\n    String[] alphabet = new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\n    Map<String, Integer> memo;\n\n    public int kSimilarity(String A, String B) {\n        if (A.equals(B)) return 0;\n        int N = A.length();\n        memo = new HashMap();\n        int ans = 0;\n\n        int[] count = new int[alphabet.length * alphabet.length];\n        for (int i = 0; i < N; ++i)\n            if (A.charAt(i) != B.charAt(i)) {\n                count[alphabet.length * (A.charAt(i) - 'a') + (B.charAt(i) - 'a')]++;\n                ans++;\n            }\n\n        List<int[]> possibles = new ArrayList();\n        // Enumerate over every cycle\n        for (int size = 2; size <= alphabet.length; ++size)\n            search: for (String cycle: permutations(alphabet, 0, size)) {\n                // Check if cycle is canonical\n                for (int i = 1; i < size; ++i)\n                    if (cycle.charAt(i) < cycle.charAt(0))\n                        continue search;\n\n                // Add count to possibles\n                int[] row = new int[count.length];\n                for (int i = 0; i < size; ++i) {\n                    int u = cycle.charAt(i) - 'a';\n                    int v = cycle.charAt((i+1) % size) - 'a';\n                    row[alphabet.length * u + v]++;\n                }\n                possibles.add(row);\n            }\n\n        int[] ZERO = new int[count.length];\n        memo.put(Arrays.toString(ZERO), 0);\n        return ans - numCycles(possibles, count);\n    }\n\n    public int numCycles(List<int[]> possibles, int[] count) {\n        String countS = Arrays.toString(count);\n        if (memo.containsKey(countS)) return memo.get(countS);\n\n        int ans = Integer.MIN_VALUE;\n        search: for (int[] row: possibles) {\n            int[] count2 = count.clone();\n            for (int i = 0; i < row.length; ++i) {\n                if (count2[i] >= row[i])\n                    count2[i] -= row[i];\n                else\n                    continue search;\n            }\n            ans = Math.max(ans, 1 + numCycles(possibles, count2));\n        }\n\n        memo.put(countS, ans);\n        return ans;\n    }\n\n    public List<String> permutations(String[] alphabet, int used, int size) {\n        List<String> ans = new ArrayList();\n        if (size == 0) {\n            ans.add(new String(\"\"));\n            return ans;\n        }\n\n        for (int b = 0; b < alphabet.length; ++b)\n            if (((used >> b) & 1) == 0)\n                for (String rest: permutations(alphabet, used | (1 << b), size - 1))\n                    ans.add(alphabet[b] + rest);\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def kSimilarity(self, A, B):\n        if A == B: return 0\n\n        N = len(A)\n        alphabet = 'abcdef'\n        pairs = [(a, b) for a in alphabet for b in alphabet if a != b]\n        index = {p: i for i, p in enumerate(pairs)}\n\n        count = [0] * len(index)\n        for a, b in itertools.izip(A, B):\n            if a != b:\n                count[index[a, b]] += 1\n\n        seen = set()\n        for size in xrange(2, len(alphabet) + 1):\n            for cand in itertools.permutations(alphabet, size):\n                i = cand.index(min(cand))\n                seen.add(cand[i:] + cand[:i])\n\n        possibles = []\n        for cand in seen:\n            row = [0] * len(alphabet) * (len(alphabet) - 1)\n            for a, b in itertools.izip(cand, cand[1:] + cand[:1]):\n                row[index[a, b]] += 1\n            possibles.append(row)\n\n        ZERO = tuple([0] * len(row))\n        memo = {ZERO: 0}\n        def solve(count):\n            if count in memo: return memo[count]\n\n            ans = float('-inf')\n            for row in possibles:\n                count2 = list(count)\n                for i, x in enumerate(row):\n                    if count2[i] >= x:\n                        count2[i] -= x\n                    else: break\n                else:\n                    ans = max(ans, 1 + solve(tuple(count2)))\n\n            memo[count] = ans\n            return ans\n\n        return sum(count) - solve(tuple(count))",
        "langSlug": "python"
      }
    ],
    "nNLRdQYX": [
      {
        "code": "class Solution {\n    public int kSimilarity(String A, String B) {\n        Queue<String> queue = new ArrayDeque();\n        queue.offer(A);\n\n        Map<String, Integer> dist = new HashMap();\n        dist.put(A, 0);\n\n        while (!queue.isEmpty()) {\n            String S = queue.poll();\n            if (S.equals(B)) return dist.get(S);\n            for (String T: neighbors(S, B)) {\n                if (!dist.containsKey(T)) {\n                    dist.put(T, dist.get(S) + 1);\n                    queue.offer(T);\n                }\n            }\n        }\n\n        throw null;\n    }\n\n    public List<String> neighbors(String S, String target) {\n        List<String> ans = new ArrayList();\n        int i = 0;\n        for (; i < S.length(); ++i) {\n            if (S.charAt(i) != target.charAt(i)) break;\n        }\n\n        char[] T = S.toCharArray();\n        for (int j = i+1; j < S.length(); ++j)\n            if (S.charAt(j) == target.charAt(i)) {\n                swap(T, i, j);\n                ans.add(new String(T));\n                swap(T, i, j);\n            }\n\n        return ans;\n    }\n\n    public void swap(char[] T, int i, int j) {\n        char tmp = T[i];\n        T[i] = T[j];\n        T[j] = tmp;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def kSimilarity(self, A, B):\n        def neighbors(S):\n            for i, c in enumerate(S):\n                if c != B[i]:\n                    break\n\n            T = list(S)\n            for j in xrange(i+1, len(S)):\n                if S[j] == B[i]:\n                    T[i], T[j] = T[j], T[i]\n                    yield \"\".join(T)\n                    T[j], T[i] = T[i], T[j]\n\n        queue = collections.deque([A])\n        seen = {A: 0}\n        while queue:\n            S = queue.popleft()\n            if S == B: return seen[S]\n            for T in neighbors(S):\n                if T not in seen:\n                    seen[T] = seen[S] + 1\n                    queue.append(T)",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Breadth-first Search",
    "Graph"
  ]
}