{
  "id": "907",
  "title": "Sum of Subarray Minimums",
  "slug": "sum-of-subarray-minimums",
  "difficulty": "Medium",
  "likes": 635,
  "dislikes": 44,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "561",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "CMceXvyZ": [
      {
        "code": "class Solution {\n    public int sumSubarrayMins(int[] A) {\n        int MOD = 1_000_000_007;\n        int N = A.length;\n\n        // prev has i* - 1 in increasing order of A[i* - 1]\n        // where i* is the answer to query j\n        Stack<Integer> stack = new Stack();\n        int[] prev = new int[N];\n        for (int i = 0; i < N; ++i) {\n            while (!stack.isEmpty() && A[i] <= A[stack.peek()])\n                stack.pop();\n            prev[i] = stack.isEmpty() ? -1 : stack.peek();\n            stack.push(i);\n        }\n\n        // next has k* + 1 in increasing order of A[k* + 1]\n        // where k* is the answer to query j\n        stack = new Stack();\n        int[] next = new int[N];\n        for (int k = N-1; k >= 0; --k) {\n            while (!stack.isEmpty() && A[k] < A[stack.peek()])\n                stack.pop();\n            next[k] = stack.isEmpty() ? N : stack.peek();\n            stack.push(k);\n        }\n\n        // Use prev/next array to count answer\n        long ans = 0;\n        for (int i = 0; i < N; ++i) {\n            ans += (i - prev[i]) * (next[i] - i) % MOD * A[i] % MOD;\n            ans %= MOD;\n        }\n        return (int) ans;\n\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def sumSubarrayMins(self, A):\n        MOD = 10**9 + 7\n        N = len(A)\n\n        # prev has i* - 1 in increasing order of A[i* - 1]\n        # where i* is the answer to query j\n        stack = []\n        prev = [None] * N\n        for i in xrange(N):\n            while stack and A[i] <= A[stack[-1]]:\n                stack.pop()\n            prev[i] = stack[-1] if stack else -1\n            stack.append(i)\n\n        # next has k* + 1 in increasing order of A[k* + 1]\n        # where k* is the answer to query j\n        stack = []\n        next_ = [None] * N\n        for k in xrange(N-1, -1, -1):\n            while stack and A[k] < A[stack[-1]]:\n                stack.pop()\n            next_[k] = stack[-1] if stack else N\n            stack.append(k)\n\n        # Use prev/next array to count answer\n        return sum((i - prev[i]) * (next_[i] - i) * A[i]\n                   for i in xrange(N)) % MOD",
        "langSlug": "python"
      }
    ],
    "yoG86DGx": [
      {
        "code": "class Solution {\n    public int sumSubarrayMins(int[] A) {\n        int MOD = 1_000_000_007;\n\n        Stack<RepInteger> stack = new Stack();\n        int ans = 0, dot = 0;\n        for (int j = 0; j < A.length; ++j) {\n            // Add all answers for subarrays [i, j], i <= j\n            int count = 1;\n            while (!stack.isEmpty() && stack.peek().val >= A[j]) {\n                RepInteger node = stack.pop();\n                count += node.count;\n                dot -= node.val * node.count;\n            }\n            stack.push(new RepInteger(A[j], count));\n            dot += A[j] * count;\n            ans += dot;\n            ans %= MOD;\n        }\n\n        return ans;\n    }\n}\n\nclass RepInteger {\n    int val, count;\n    RepInteger(int v, int c) {\n        val = v;\n        count = c;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def sumSubarrayMins(self, A):\n        MOD = 10**9 + 7\n\n        stack = []\n        ans = dot = 0\n        for j, y in enumerate(A):\n            # Add all answers for subarrays [i, j], i <= j\n            count = 1\n            while stack and stack[-1][0] >= y:\n                x, c = stack.pop()\n                count += c\n                dot -= x * c\n\n            stack.append((y, count))\n            dot += y * count\n            ans += dot\n        return ans % MOD",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Array",
    "Stack"
  ]
}