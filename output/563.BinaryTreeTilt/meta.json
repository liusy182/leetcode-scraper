{
  "id": "563",
  "title": "Binary Tree Tilt",
  "slug": "binary-tree-tilt",
  "difficulty": "Easy",
  "likes": 358,
  "dislikes": 823,
  "hints": [
    "Don't think too much, this is an easy problem. Take some small tree as an example.",
    "Can a parent node use the values of its child nodes? How will you implement it?",
    "May be recursion and tree traversal can help you in implementing.",
    "What about postorder traversal, using values of left and right childs?"
  ],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "115",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "kegZTTSb": [
      {
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    int tilt = 0;\n    public int findTilt(TreeNode root) {\n        traverse(root);\n        return tilt;\n    }\n    public int traverse(TreeNode root)\n    {\n        if (root == null )\n            return 0;\n        int left = traverse(root.left);\n        int right = traverse(root.right);\n        tilt += Math.abs(left-right);\n        return left + right + root.val;\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Tree"
  ]
}