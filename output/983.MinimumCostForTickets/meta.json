{
  "id": "983",
  "title": "Minimum Cost For Tickets",
  "slug": "minimum-cost-for-tickets",
  "difficulty": "Medium",
  "likes": 636,
  "dislikes": 13,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Coin Change\", \"titleSlug\": \"coin-change\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "675",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "vQP5W3UT": [
      {
        "code": "class Solution {\n    int[] costs;\n    Integer[] memo;\n    Set<Integer> dayset;\n\n    public int mincostTickets(int[] days, int[] costs) {\n        this.costs = costs;\n        memo = new Integer[366];\n        dayset = new HashSet();\n        for (int d: days) dayset.add(d);\n\n        return dp(1);\n    }\n\n    public int dp(int i) {\n        if (i > 365)\n            return 0;\n        if (memo[i] != null)\n            return memo[i];\n\n        int ans;\n        if (dayset.contains(i)) {\n            ans = Math.min(dp(i+1) + costs[0],\n                               dp(i+7) + costs[1]);\n            ans = Math.min(ans, dp(i+30) + costs[2]);\n        } else {\n            ans = dp(i+1);\n        }\n\n        memo[i] = ans;\n        return ans;\n    }\n}\n",
        "langSlug": "java"
      },
      {
        "code": "from functools import lru_cache\n\nclass Solution:\n    def mincostTickets(self, days, costs):\n        dayset = set(days)\n        durations = [1, 7, 30]\n\n        @lru_cache(None)\n        def dp(i):\n            if i > 365:\n                return 0\n            elif i in dayset:\n                return min(dp(i + d) + c\n                           for c, d in zip(costs, durations))\n            else:\n                return dp(i + 1)\n\n        return dp(1)",
        "langSlug": "python3"
      }
    ],
    "NtqEyFYA": [
      {
        "code": "class Solution {\n    int[] days, costs;\n    Integer[] memo;\n    int[] durations = new int[]{1, 7, 30};\n\n    public int mincostTickets(int[] days, int[] costs) {\n        this.days = days;\n        this.costs = costs;\n        memo = new Integer[days.length];\n\n        return dp(0);\n    }\n\n    public int dp(int i) {\n        if (i >= days.length)\n            return 0;\n        if (memo[i] != null)\n            return memo[i];\n\n        int ans = Integer.MAX_VALUE;\n        int j = i;\n        for (int k = 0; k < 3; ++k) {\n            while (j < days.length && days[j] < days[i] + durations[k])\n                j++;\n            ans = Math.min(ans, dp(j) + costs[k]);\n        }\n\n        memo[i] = ans;\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "from functools import lru_cache\n\nclass Solution:\n    def mincostTickets(self, days, costs):\n        N = len(days)\n        durations = [1, 7, 30]\n\n        @lru_cache(None)\n        def dp(i): # How much money to do days[i]+\n            if i >= N: return 0\n\n            ans = float('inf')\n            j = i\n            for c, d in zip(costs, durations):\n                while j < N and days[j] < days[i] + d:\n                    j += 1\n                ans = min(ans, dp(j) + c)\n\n            return ans\n\n        return dp(0)",
        "langSlug": "python3"
      }
    ]
  },
  "topicTags": [
    "Dynamic Programming"
  ]
}