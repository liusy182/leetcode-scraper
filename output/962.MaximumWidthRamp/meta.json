{
  "id": "962",
  "title": "Maximum Width Ramp",
  "slug": "maximum-width-ramp",
  "difficulty": "Medium",
  "likes": 319,
  "dislikes": 10,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "646",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "cTgKu5cw": [
      {
        "code": "class Solution {\n    public int maxWidthRamp(int[] A) {\n        int N = A.length;\n        Integer[] B = new Integer[N];\n        for (int i = 0; i < N; ++i)\n            B[i] = i;\n\n        Arrays.sort(B, (i, j) -> ((Integer) A[i]).compareTo(A[j]));\n\n        int ans = 0;\n        int m = N;\n        for (int i: B) {\n            ans = Math.max(ans, i - m);\n            m = Math.min(m, i);\n        }\n\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxWidthRamp(self, A):\n        ans = 0\n        m = float('inf')\n        for i in sorted(range(len(A)), key = A.__getitem__):\n            ans = max(ans, i - m)\n            m = min(m, i)\n        return ans",
        "langSlug": "python"
      }
    ],
    "jtYswxPE": [
      {
        "code": "import java.awt.Point;\n\nclass Solution {\n    public int maxWidthRamp(int[] A) {\n        int N = A.length;\n\n        int ans = 0;\n        List<Point> candidates = new ArrayList();\n        candidates.add(new Point(A[N-1], N-1));\n\n        // candidates: i's decreasing, by increasing value of A[i]\n        for (int i = N-2; i >= 0; --i) {\n            // Find largest j in candidates with A[j] >= A[i]\n            int lo = 0, hi = candidates.size();\n            while (lo < hi) {\n                int mi = lo + (hi - lo) / 2;\n                if (candidates.get(mi).x < A[i])\n                    lo = mi + 1;\n                else\n                    hi = mi;\n            }\n\n            if (lo < candidates.size()) {\n                int j = candidates.get(lo).y;\n                ans = Math.max(ans, j - i);\n            } else {\n                candidates.add(new Point(A[i], i));\n            }\n        }\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def maxWidthRamp(self, A):\n        N = len(A)\n\n        ans = 0\n        candidates = [(A[N-1], N-1)]\n        # candidates: i's decreasing, by increasing value of A[i]\n        for i in xrange(N-2, -1, -1):\n            # Find largest j in candidates with A[j] >= A[i]\n            jx = bisect.bisect(candidates, (A[i],))\n            if jx < len(candidates):\n                ans = max(ans, candidates[jx][1] - i)\n            else:\n                candidates.append((A[i], i))\n\n        return ans",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Array"
  ]
}