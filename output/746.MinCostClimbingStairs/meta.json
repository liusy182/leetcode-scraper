{
  "id": "746",
  "title": "Min Cost Climbing Stairs",
  "slug": "min-cost-climbing-stairs",
  "difficulty": "Easy",
  "likes": 1218,
  "dislikes": 285,
  "hints": [
    "Say f[i] is the final cost to climb to the top from step i.  Then f[i] = cost[i] + min(f[i+1], f[i+2])."
  ],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Climbing Stairs\", \"titleSlug\": \"climbing-stairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "solution": {
    "id": "347",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "R8h7KgV3": [
      {
        "code": "class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        int f1 = 0, f2 = 0;\n        for (int i = cost.length - 1; i >= 0; --i) {\n            int f0 = cost[i] + Math.min(f1, f2);\n            f2 = f1;\n            f1 = f0;\n        }\n        return Math.min(f1, f2);\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minCostClimbingStairs(self, cost):\n        f1 = f2 = 0\n        for x in reversed(cost):\n            f1, f2 = x + min(f1, f2), f1\n        return min(f1, f2)",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Array",
    "Dynamic Programming"
  ]
}