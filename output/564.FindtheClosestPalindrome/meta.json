{
  "id": "564",
  "title": "Find the Closest Palindrome",
  "slug": "find-the-closest-palindrome",
  "difficulty": "Hard",
  "likes": 166,
  "dislikes": 650,
  "hints": [
    "Will brute force work for this problem? Think of something else.",
    "Take some examples like 1234, 999,1000, etc and check their closest palindromes. How many different cases are possible?",
    "Do we have to consider only left half or right half of the string or both?",
    "Try to find the closest palindrome of these numbers- 12932, 99800, 12120. Did you observe something?"
  ],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "116",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "DvreVK8V": [
      {
        "code": "public class Solution {\n    public String nearestPalindromic(String n) {\n        long num = Long.parseLong(n);\n        for (long i = 1;; i++) {\n            if (isPalindrome(num - i))\n                return \"\" + (num - i);\n            if (isPalindrome(num + i))\n                return \"\" + (num + i);\n        }\n    }\n    boolean isPalindrome(long x) {\n        long t = x, rev = 0;\n        while (t > 0) {\n            rev = 10 * rev + t % 10;\n            t /= 10;\n        }\n        return rev == x;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "Y6G9NDDf": [
      {
        "code": "public class Solution {\n    public String mirroring(String s) {\n        String x = s.substring(0, (s.length()) / 2);\n        return x + (s.length() % 2 == 1 ? s.charAt(s.length() / 2) : \"\") + new StringBuilder(x).reverse().toString();\n    }\n    public String nearestPalindromic(String n) {\n        if (n.equals(\"1\"))\n            return \"0\";\n\n        String a = mirroring(n);\n        long diff1 = Long.MAX_VALUE;\n        diff1 = Math.abs(Long.parseLong(n) - Long.parseLong(a));\n        if (diff1 == 0)\n            diff1 = Long.MAX_VALUE;\n\n        StringBuilder s = new StringBuilder(n);\n        int i = (s.length() - 1) / 2;\n        while (i >= 0 && s.charAt(i) == '0') {\n            s.replace(i, i + 1, \"9\");\n            i--;\n        }\n        if (i == 0 && s.charAt(i) == '1') {\n            s.delete(0, 1);\n            int mid = (s.length() - 1) / 2;\n            s.replace(mid, mid + 1, \"9\");\n        } else\n            s.replace(i, i + 1, \"\" + (char)(s.charAt(i) - 1));\n        String b = mirroring(s.toString());\n        long diff2 = Math.abs(Long.parseLong(n) - Long.parseLong(b));\n\n\n        s = new StringBuilder(n);\n        i = (s.length() - 1) / 2;\n        while (i >= 0 && s.charAt(i) == '9') {\n            s.replace(i, i + 1, \"0\");\n            i--;\n        }\n        if (i < 0) {\n            s.insert(0, \"1\");\n        } else\n            s.replace(i, i + 1, \"\" + (char)(s.charAt(i) + 1));\n        String c = mirroring(s.toString());\n        long diff3 = Math.abs(Long.parseLong(n) - Long.parseLong(c));\n\n        if (diff2 <= diff1 && diff2 <= diff3)\n            return b;\n        if (diff1 <= diff3 && diff1 <= diff2)\n            return a;\n        else\n            return c;\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "String"
  ]
}