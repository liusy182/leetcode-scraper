{
  "id": "745",
  "title": "Prefix and Suffix Search",
  "slug": "prefix-and-suffix-search",
  "difficulty": "Hard",
  "likes": 225,
  "dislikes": 164,
  "hints": [
    "For a word like \"test\", consider \"#test\", \"t#test\", \"st#test\", \"est#test\", \"test#test\".  Then if we have a query like prefix = \"te\", suffix = \"t\", we can find it by searching for something we've inserted starting with \"t#te\"."
  ],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Add and Search Word - Data structure design\", \"titleSlug\": \"add-and-search-word-data-structure-design\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "337",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "ihA9cm57": [
      {
        "code": "class WordFilter {\n    TrieNode trie1, trie2;\n    public WordFilter(String[] words) {\n        trie1 = new TrieNode();\n        trie2 = new TrieNode();\n        int wt = 0;\n        for (String word: words) {\n            char[] ca = word.toCharArray();\n\n            TrieNode cur = trie1;\n            cur.weight.add(wt);\n            for (char letter: ca) {\n                if (cur.children[letter - 'a'] == null)\n                    cur.children[letter - 'a'] = new TrieNode();\n                cur = cur.children[letter - 'a'];\n                cur.weight.add(wt);\n            }\n\n            cur = trie2;\n            cur.weight.add(wt);\n            for (int j = ca.length - 1; j >= 0; --j) {\n                char letter = ca[j];\n                if (cur.children[letter - 'a'] == null)\n                    cur.children[letter - 'a'] = new TrieNode();\n                cur = cur.children[letter - 'a'];\n                cur.weight.add(wt);\n            }\n            wt++;\n        }\n    }\n\n    public int f(String prefix, String suffix) {\n        TrieNode cur1 = trie1, cur2 = trie2;\n        for (char letter: prefix.toCharArray()) {\n            if (cur1.children[letter - 'a'] == null) return -1;\n            cur1 = cur1.children[letter - 'a'];\n        }\n        char[] ca = suffix.toCharArray();\n        for (int j = ca.length - 1; j >= 0; --j) {\n            char letter = ca[j];\n            if (cur2.children[letter - 'a'] == null) return -1;\n            cur2 = cur2.children[letter - 'a'];\n        }\n\n        int ans = -1;\n        for (int w1: cur1.weight)\n            if (w1 > ans && cur2.weight.contains(w1))\n                ans = w1;\n\n        return ans;\n    }\n}\n\nclass TrieNode {\n    TrieNode[] children;\n    Set<Integer> weight;\n    public TrieNode() {\n        children = new TrieNode[26];\n        weight = new HashSet();\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "Trie = lambda: collections.defaultdict(Trie)\nWEIGHT = False\n\nclass WordFilter(object):\n    def __init__(self, words):\n        self.trie1 = Trie() #prefix\n        self.trie2 = Trie() #suffix\n        for weight, word in enumerate(words):\n            cur = self.trie1\n            self.addw(cur, weight)\n            for letter in word:\n                cur = cur[letter]\n                self.addw(cur, weight)\n\n            cur = self.trie2\n            self.addw(cur, weight)\n            for letter in word[::-1]:\n                cur = cur[letter]\n                self.addw(cur, weight)\n\n    def addw(self, node, w):\n        if WEIGHT not in node:\n            node[WEIGHT] = {w}\n        else:\n            node[WEIGHT].add(w)\n\n    def f(self, prefix, suffix):\n        cur1 = self.trie1\n        for letter in prefix:\n            if letter not in cur1: return -1\n            cur1 = cur1[letter]\n\n        cur2 = self.trie2\n        for letter in suffix[::-1]:\n            if letter not in cur2: return -1\n            cur2 = cur2[letter]\n\n        return max(cur1[WEIGHT] & cur2[WEIGHT])",
        "langSlug": "python"
      }
    ],
    "rphE5ncp": [
      {
        "code": "class WordFilter {\n    TrieNode trie;\n    public WordFilter(String[] words) {\n        trie = new TrieNode();\n        int wt = 0;\n        for (String word: words) {\n            TrieNode cur = trie;\n            cur.weight = wt;\n            int L = word.length();\n            char[] chars = word.toCharArray();\n            for (int i = 0; i < L; ++i) {\n\n                TrieNode tmp = cur;\n                for (int j = i; j < L; ++j) {\n                    int code = (chars[j] - '`') * 27;\n                    if (tmp.children.get(code) == null)\n                        tmp.children.put(code, new TrieNode());\n                    tmp = tmp.children.get(code);\n                    tmp.weight = wt;\n                }\n\n                tmp = cur;\n                for (int k = L - 1 - i; k >= 0; --k) {\n                    int code = (chars[k] - '`');\n                    if (tmp.children.get(code) == null)\n                        tmp.children.put(code, new TrieNode());\n                    tmp = tmp.children.get(code);\n                    tmp.weight = wt;\n                }\n\n                int code = (chars[i] - '`') * 27 + (chars[L - 1 - i] - '`');\n                if (cur.children.get(code) == null)\n                    cur.children.put(code, new TrieNode());\n                cur = cur.children.get(code);\n                cur.weight = wt;\n\n            }\n            wt++;\n        }\n    }\n\n    public int f(String prefix, String suffix) {\n        TrieNode cur = trie;\n        int i = 0, j = suffix.length() - 1;\n        while (i < prefix.length() || j >= 0) {\n            char c1 = i < prefix.length() ? prefix.charAt(i) : '`';\n            char c2 = j >= 0 ? suffix.charAt(j) : '`';\n            int code = (c1 - '`') * 27 + (c2 - '`');\n            cur = cur.children.get(code);\n            if (cur == null) return -1;\n            i++; j--;\n        }\n        return cur.weight;\n    }\n}\n\nclass TrieNode {\n    Map<Integer, TrieNode> children;\n    int weight;\n    public TrieNode() {\n        children = new HashMap();\n        weight = 0;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "Trie = lambda: collections.defaultdict(Trie)\nWEIGHT = False\n\nclass WordFilter(object):\n    def __init__(self, words):\n        self.trie = Trie()\n\n        for weight, word in enumerate(words):\n            cur = self.trie\n            cur[WEIGHT] = weight\n            for i, x in enumerate(word):\n                #Put all prefixes and suffixes\n                tmp = cur\n                for letter in word[i:]:\n                    tmp = tmp[letter, None]\n                    tmp[WEIGHT] = weight\n\n                tmp = cur\n                for letter in word[:-i or None][::-1]:\n                    tmp = tmp[None, letter]\n                    tmp[WEIGHT] = weight\n\n                #Advance letters\n                cur = cur[x, word[~i]]\n                cur[WEIGHT] = weight\n\n    def search(self, prefix, suffix):\n        cur = self.trie\n        for a, b in map(None, prefix, suffix[::-1]):\n            if (a, b) not in cur: return -1\n            cur = cur[a, b]\n        return cur[WEIGHT]",
        "langSlug": "python"
      }
    ],
    "hSdRfBf4": [
      {
        "code": "class WordFilter {\n    TrieNode trie;\n    public WordFilter(String[] words) {\n        trie = new TrieNode();\n        for (int weight = 0; weight < words.length; ++weight) {\n            String word = words[weight] + \"{\";\n            for (int i = 0; i < word.length(); ++i) {\n                TrieNode cur = trie;\n                cur.weight = weight;\n                for (int j = i; j < 2 * word.length() - 1; ++j) {\n                    int k = word.charAt(j % word.length()) - 'a';\n                    if (cur.children[k] == null)\n                        cur.children[k] = new TrieNode();\n                    cur = cur.children[k];\n                    cur.weight = weight;\n                }\n            }\n        }\n    }\n    public int f(String prefix, String suffix) {\n        TrieNode cur = trie;\n        for (char letter: (suffix + '{' + prefix).toCharArray()) {\n            if (cur.children[letter - 'a'] == null) return -1;\n            cur = cur.children[letter - 'a'];\n        }\n        return cur.weight;\n    }\n}\n\nclass TrieNode {\n    TrieNode[] children;\n    int weight;\n    public TrieNode() {\n        children = new TrieNode[27];\n        weight = 0;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "Trie = lambda: collections.defaultdict(Trie)\nWEIGHT = False\n\nclass WordFilter(object):\n    def __init__(self, words):\n        self.trie = Trie()\n\n        for weight, word in enumerate(words):\n            word += '#'\n            for i in xrange(len(word)):\n                cur = self.trie\n                cur[WEIGHT] = weight\n                for j in xrange(i, 2 * len(word) - 1):\n                    cur = cur[word[j % len(word)]]\n                    cur[WEIGHT] = weight\n\n    def f(self, prefix, suffix):\n        cur = self.trie\n        for letter in suffix + '#' + prefix:\n            if letter not in cur:\n                return -1\n            cur = cur[letter]\n        return cur[WEIGHT]",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Trie"
  ]
}