{
  "id": "839",
  "title": "Similar String Groups",
  "slug": "similar-string-groups",
  "difficulty": "Hard",
  "likes": 184,
  "dislikes": 63,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "471",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "B2BjbwA7": [
      {
        "code": "class Solution {\n    public int numSimilarGroups(String[] A) {\n        int N = A.length;\n        int W = A[0].length();\n        DSU dsu = new DSU(N);\n\n        if (N < W*W) { // If few words, then check for pairwise similarity: O(N^2 W)\n            for (int i = 0; i < N; ++i)\n                for (int j = i+1; j < N; ++j)\n                    if (similar(A[i], A[j]))\n                        dsu.union(i, j);\n\n        } else { // If short words, check all neighbors: O(N W^3)\n            Map<String, List<Integer>> buckets = new HashMap();\n            for (int i = 0; i < N; ++i) {\n                char[] L = A[i].toCharArray();\n                for (int j0 = 0; j0 < L.length; ++j0)\n                    for (int j1 = j0 + 1; j1 < L.length; ++j1) {\n                        swap(L, j0, j1);\n                        StringBuilder sb = new StringBuilder();\n                        for (char c: L) sb.append(c);\n                        buckets.computeIfAbsent(sb.toString(),\n                                x-> new ArrayList<Integer>()).add(i);\n                        swap(L, j0, j1);\n                    }\n            }\n\n            for (int i1 = 0; i1 < A.length; ++i1)\n                if (buckets.containsKey(A[i1]))\n                    for (int i2: buckets.get(A[i1]))\n                        dsu.union(i1, i2);\n        }\n\n        int ans = 0;\n        for (int i = 0; i < N; ++i)\n            if (dsu.parent[i] == i) ans++;\n\n        return ans;\n    }\n\n    public boolean similar(String word1, String word2) {\n        int diff = 0;\n        for (int i = 0; i < word1.length(); ++i)\n            if (word1.charAt(i) != word2.charAt(i))\n                diff++;\n        return diff <= 2;\n    }\n\n    public void swap(char[] A, int i, int j) {\n        char tmp = A[i];\n        A[i] = A[j];\n        A[j] = tmp;\n    }\n}\n\nclass DSU {\n    int[] parent;\n    public DSU(int N) {\n        parent = new int[N];\n        for (int i = 0; i < N; ++i)\n            parent[i] = i;\n    }\n    public int find(int x) {\n        if (parent[x] != x) parent[x] = find(parent[x]);\n        return parent[x];\n    }\n    public void union(int x, int y) {\n        parent[find(x)] = find(y);\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class DSU:\n    def __init__(self, N):\n        self.par = range(N)\n    def find(self, x):\n        if self.par[x] != x:\n            self.par[x] = self.find(self.par[x])\n        return self.par[x]\n    def union(self, x, y):\n        self.par[self.find(x)] = self.find(y)\n\nclass Solution(object): # (NW) * min(N, W*W) complexity\n    def numSimilarGroups(self, A):\n        N, W = len(A), len(A[0])\n\n        def similar(word1, word2):\n            diff = 0\n            for x, y in itertools.izip(word1, word2):\n                if x != y:\n                    diff += 1\n            return diff <= 2\n\n        dsu = DSU(N)\n\n        if N < W*W: # If few words, then check for pairwise similarity: O(N^2 W)\n            for (i1, word1), (i2, word2) in \\\n                    itertools.combinations(enumerate(A), 2):\n                if similar(word1, word2):\n                    dsu.union(i1, i2)\n\n        else: # If short words, check all neighbors: O(N W^3)\n            buckets = collections.defaultdict(set)\n            for i, word in enumerate(A):\n                L = list(word)\n                for j0, j1 in itertools.combinations(xrange(W), 2):\n                    L[j0], L[j1] = L[j1], L[j0]\n                    buckets[\"\".join(L)].add(i)\n                    L[j0], L[j1] = L[j1], L[j0]\n\n            for i1, word in enumerate(A):\n                for i2 in buckets[word]:\n                    dsu.union(i1, i2)\n\n        return sum(dsu.par[x] == x for x in xrange(N))",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Depth-first Search",
    "Union Find",
    "Graph"
  ]
}