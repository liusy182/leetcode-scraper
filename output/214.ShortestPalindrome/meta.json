{
  "id": "214",
  "title": "Shortest Palindrome",
  "slug": "shortest-palindrome",
  "difficulty": "Hard",
  "likes": 741,
  "dislikes": 88,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Implement strStr()\", \"titleSlug\": \"implement-strstr\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Palindrome Pairs\", \"titleSlug\": \"palindrome-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "solution": {
    "id": "174",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "ofq6FrQW": [
      {
        "code": "string shortestPalindrome(string s)\n{\n    int n = s.size();\n    string rev(s);\n    reverse(rev.begin(), rev.end());\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (s.substr(0, n - i) == rev.substr(i))\n            return rev.substr(0, i) + s;\n    }\n    return \"\";\n}",
        "langSlug": "cpp"
      }
    ],
    "zeLz2M4w": [
      {
        "code": "string shortestPalindrome(string s)\n{\n    int n = s.size();\n    int i = 0;\n    for (int j = n - 1; j >= 0; j--) {\n        if (s[i] == s[j])\n            i++;\n    }\n    if (i == n)\n        return s;\n    string remain_rev = s.substr(i, n);\n    reverse(remain_rev.begin(), remain_rev.end());\n    return remain_rev + shortestPalindrome(s.substr(0, i)) + s.substr(i);\n}",
        "langSlug": "cpp"
      }
    ],
    "Uu5sN23P": [
      {
        "code": "string shortestPalindrome(string s)\n{\n    int n = s.size();\n    string rev(s);\n    reverse(rev.begin(), rev.end());\n    string s_new = s + \"#\" + rev;\n    int n_new = s_new.size();\n    vector<int> f(n_new, 0);\n    for (int i = 1; i < n_new; i++) {\n        int t = f[i - 1];\n        while (t > 0 && s_new[i] != s_new[t])\n            t = f[t - 1];\n        if (s_new[i] == s_new[t])\n            ++t;\n        f[i] = t;\n    }\n    return rev.substr(0, n - f[n_new - 1]) + s;\n}",
        "langSlug": "cpp"
      }
    ]
  },
  "topicTags": [
    "String"
  ]
}