{
  "id": "803",
  "title": "Bricks Falling When Hit",
  "slug": "bricks-falling-when-hit",
  "difficulty": "Hard",
  "likes": 331,
  "dislikes": 96,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "433",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "vKx7cbxE": [
      {
        "code": "class Solution {\n    public int[] hitBricks(int[][] grid, int[][] hits) {\n        int R = grid.length, C = grid[0].length;\n        int[] dr = {1, 0, -1, 0};\n        int[] dc = {0, 1, 0, -1};\n\n        int[][] A = new int[R][C];\n        for (int r = 0; r < R; ++r)\n            A[r] = grid[r].clone();\n        for (int[] hit: hits)\n            A[hit[0]][hit[1]] = 0;\n\n        DSU dsu = new DSU(R*C + 1);\n        for (int r = 0; r < R; ++r) {\n            for (int c = 0; c < C; ++c) {\n                if (A[r][c] == 1) {\n                    int i = r * C + c;\n                    if (r == 0)\n                        dsu.union(i, R*C);\n                    if (r > 0 && A[r-1][c] == 1)\n                        dsu.union(i, (r-1) *C + c);\n                    if (c > 0 && A[r][c-1] == 1)\n                        dsu.union(i, r * C + c-1);\n                }\n            }\n        }\n        int t = hits.length;\n        int[] ans = new int[t--];\n\n        while (t >= 0) {\n            int r = hits[t][0];\n            int c = hits[t][1];\n            int preRoof = dsu.top();\n            if (grid[r][c] == 0) {\n                t--;\n            } else {\n                int i = r * C + c;\n                for (int k = 0; k < 4; ++k) {\n                    int nr = r + dr[k];\n                    int nc = c + dc[k];\n                    if (0 <= nr && nr < R && 0 <= nc && nc < C && A[nr][nc] == 1)\n                        dsu.union(i, nr * C + nc);\n                }\n                if (r == 0)\n                    dsu.union(i, R*C);\n                A[r][c] = 1;\n                ans[t--] = Math.max(0, dsu.top() - preRoof - 1);\n            }\n        }\n\n        return ans;\n    }\n}\n\nclass DSU {\n    int[] parent;\n    int[] rank;\n    int[] sz;\n\n    public DSU(int N) {\n        parent = new int[N];\n        for (int i = 0; i < N; ++i)\n            parent[i] = i;\n        rank = new int[N];\n        sz = new int[N];\n        Arrays.fill(sz, 1);\n    }\n\n    public int find(int x) {\n        if (parent[x] != x) parent[x] = find(parent[x]);\n        return parent[x];\n    }\n\n    public void union(int x, int y) {\n        int xr = find(x), yr = find(y);\n        if (xr == yr) return;\n\n        if (rank[xr] < rank[yr]) {\n            int tmp = yr;\n            yr = xr;\n            xr = tmp;\n        }\n        if (rank[xr] == rank[yr])\n            rank[xr]++;\n\n        parent[yr] = xr;\n        sz[xr] += sz[yr];\n    }\n\n    public int size(int x) {\n        return sz[find(x)];\n    }\n\n    public int top() {\n        return size(sz.length - 1) - 1;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class DSU:\n    def __init__(self, R, C):\n        #R * C is the source, and isn't a grid square\n        self.par = range(R*C + 1)\n        self.rnk = [0] * (R*C + 1)\n        self.sz = [1] * (R*C + 1)\n\n    def find(self, x):\n        if self.par[x] != x:\n            self.par[x] = self.find(self.par[x])\n        return self.par[x]\n\n    def union(self, x, y):\n        xr, yr = self.find(x), self.find(y)\n        if xr == yr: return\n        if self.rnk[xr] < self.rnk[yr]:\n            xr, yr = yr, xr\n        if self.rnk[xr] == self.rnk[yr]:\n            self.rnk[xr] += 1\n\n        self.par[yr] = xr\n        self.sz[xr] += self.sz[yr]\n\n    def size(self, x):\n        return self.sz[self.find(x)]\n\n    def top(self):\n        # Size of component at ephemeral \"source\" node at index R*C,\n        # minus 1 to not count the source itself in the size\n        return self.size(len(self.sz) - 1) - 1\n\nclass Solution(object):\n    def hitBricks(self, grid, hits):\n        R, C = len(grid), len(grid[0])\n        def index(r, c):\n            return r * C + c\n\n        def neighbors(r, c):\n            for nr, nc in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):\n                if 0 <= nr < R and 0 <= nc < C:\n                    yield nr, nc\n\n        A = [row[:] for row in grid]\n        for i, j in hits:\n            A[i][j] = 0\n\n        dsu = DSU(R, C)\n        for r, row in enumerate(A):\n            for c, val in enumerate(row):\n                if val:\n                    i = index(r, c)\n                    if r == 0:\n                        dsu.union(i, R*C)\n                    if r and A[r-1][c]:\n                        dsu.union(i, index(r-1, c))\n                    if c and A[r][c-1]:\n                        dsu.union(i, index(r, c-1))\n\n        ans = []\n        for r, c in reversed(hits):\n            pre_roof = dsu.top()\n            if grid[r][c] == 0:\n                ans.append(0)\n            else:\n                i = index(r, c)\n                for nr, nc in neighbors(r, c):\n                    if A[nr][nc]:\n                        dsu.union(i, index(nr, nc))\n                if r == 0:\n                    dsu.union(i, R*C)\n                A[r][c] = 1\n                ans.append(max(0, dsu.top() - pre_roof - 1))\n        return ans[::-1]",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Union Find"
  ]
}