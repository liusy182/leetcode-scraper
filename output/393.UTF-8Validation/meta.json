{
  "id": "393",
  "title": "UTF-8 Validation",
  "slug": "utf-8-validation",
  "difficulty": "Medium",
  "likes": 160,
  "dislikes": 763,
  "hints": [
    "All you have to do is follow the rules. For a given integer, obtain its binary representation in the string form and work with the rules given in the problem.",
    "An integer can either represent the start of a UTF-8 character, or a part of an existing UTF-8 character. There are two separate rules for these two scenarios in the problem.",
    "If an integer is a part of an existing UTF-8 character, simply check the 2 most significant bits of in the binary representation string. They should be <b>10</b>. If the integer represents the start of a UTF-8 character, then the first few bits would be <b>1</b> followed by a <b>0</b>. The number of initial bits (most significant) bits determines the length of the UTF-8 character. \r\n\r\n<br><br>\r\n<b>Note:</b> The array can contain multiple valid UTF-8 characters.",
    "String manipulation will work fine here. But, it is too slow. Can we instead use <b>bit manipulation</b> to do the validations instead of string manipulations?",
    "We can use bit masking to check how many initial bits are set for a given number. <b>We only need to work with the 8 least significant bits as mentioned in the problem.</b>\r\n\r\n<pre>\r\nmask = 1 << 7\r\nwhile mask & num:\r\n    n_bytes += 1\r\n    mask = mask >> 1\r\n</pre>\r\n\r\nCan you use bit-masking to perform the second validation as well i.e. checking if the most significant bit is 1 and the second most significant bit a 0?",
    "To check if the most significant bit is a 1 and the second most significant bit is a 0, we can make use of the following two masks.\r\n\r\n<pre>\r\nmask1 = 1 << 7\r\nmask2 = 1 << 6\r\n\r\nif not (num & mask1 and not (num & mask2)):\r\n    return False\r\n</pre>"
  ],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "596",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "8N3Akduu": [
      {
        "code": "class Solution {\n  public boolean validUtf8(int[] data) {\n\n    // Number of bytes in the current UTF-8 character\n    int numberOfBytesToProcess = 0;\n\n    // For each integer in the data array.\n    for (int i = 0; i < data.length; i++) {\n\n      // Get the binary representation. We only need the least significant 8 bits\n      // for any given number.\n      String binRep = Integer.toBinaryString(data[i]);\n      binRep =\n          binRep.length() >= 8\n              ? binRep.substring(binRep.length() - 8)\n              : \"00000000\".substring(binRep.length() % 8) + binRep;\n\n      // If this is the case then we are to start processing a new UTF-8 character.\n      if (numberOfBytesToProcess == 0) {\n\n        // Get the number of 1s in the beginning of the string.\n        for (int j = 0; j < binRep.length(); j++) {\n          if (binRep.charAt(j) == '0') {\n            break;\n          }\n\n          numberOfBytesToProcess += 1;\n        }\n\n        // 1 byte characters\n        if (numberOfBytesToProcess == 0) {\n          continue;\n        }\n\n        // Invalid scenarios according to the rules of the problem.\n        if (numberOfBytesToProcess > 4 || numberOfBytesToProcess == 1) {\n          return false;\n        }\n\n      } else {\n\n        // Else, we are processing integers which represent bytes which are a part of\n        // a UTF-8 character. So, they must adhere to the pattern `10xxxxxx`.\n        if (!(binRep.charAt(0) == '1' && binRep.charAt(1) == '0')) {\n          return false;\n        }\n      }\n\n      // We reduce the number of bytes to process by 1 after each integer.\n      numberOfBytesToProcess -= 1;\n    }\n\n    // This is for the case where we might not have the complete data for\n    // a particular UTF-8 character.\n    return numberOfBytesToProcess == 0;\n  }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def validUtf8(self, data):\n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n\n        # Number of bytes in the current UTF-8 character\n        n_bytes = 0\n\n        # For each integer in the data array.\n        for num in data:\n\n            # Get the binary representation. We only need the least significant 8 bits\n            # for any given number.\n            bin_rep = format(num, '#010b')[-8:]\n\n            # If this is the case then we are to start processing a new UTF-8 character.\n            if n_bytes == 0:\n\n                # Get the number of 1s in the beginning of the string.\n                for bit in bin_rep:\n                    if bit == '0': break\n                    n_bytes += 1\n\n                # 1 byte characters\n                if n_bytes == 0:\n                    continue\n\n                # Invalid scenarios according to the rules of the problem.\n                if n_bytes == 1 or n_bytes > 4:\n                    return False\n            else:\n                # Else, we are processing integers which represent bytes which are a part of\n                # a UTF-8 character. So, they must adhere to the pattern `10xxxxxx`.\n                if not (bin_rep[0] == '1' and bin_rep[1] == '0'):\n                    return False\n\n            # We reduce the number of bytes to process by 1 after each integer.\n            n_bytes -= 1\n\n        # This is for the case where we might not have the complete data for\n        # a particular UTF-8 character.\n        return n_bytes == 0     ",
        "langSlug": "python"
      }
    ],
    "uDppv3wN": [
      {
        "code": "class Solution {\n    public boolean validUtf8(int[] data) {\n\n        // Number of bytes in the current UTF-8 character\n        int numberOfBytesToProcess = 0;\n\n        // Masks to check two most significant bits in a byte.\n        int mask1 = 1 << 7;\n        int mask2 = 1 << 6;\n\n        // For each integer in the data array.\n        for(int i = 0; i < data.length; i++) {\n            // If this is the case then we are to start processing a new UTF-8 character.\n            if (numberOfBytesToProcess == 0) {\n                int mask = 1 << 7;\n                 while ((mask & data[i]) != 0) {\n                    numberOfBytesToProcess += 1;\n                    mask = mask >> 1;\n                 }\n\n                // 1 byte characters\n                if (numberOfBytesToProcess == 0) {\n                    continue;\n                }\n\n                // Invalid scenarios according to the rules of the problem.\n                if (numberOfBytesToProcess > 4 || numberOfBytesToProcess == 1) {\n                    return false;\n                }\n\n            } else {\n\n                // data[i] should have most significant bit set and\n                // second most significant bit unset. So, we use the two masks\n                // to make sure this is the case.\n                if (!((data[i] & mask1) != 0 && (mask2 & data[i]) == 0)) {\n                    return false;\n                }\n            }\n\n            // We reduce the number of bytes to process by 1 after each integer.\n            numberOfBytesToProcess -= 1;\n        }\n\n        // This is for the case where we might not have the complete data for\n        // a particular UTF-8 character.\n        return numberOfBytesToProcess == 0;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def validUtf8(self, data):\n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n\n        # Number of bytes in the current UTF-8 character\n        n_bytes = 0\n\n        # Mask to check if the most significant bit (8th bit from the left) is set or not\n        mask1 = 1 << 7\n\n        # Mask to check if the second most significant bit is set or not\n        mask2 = 1 << 6\n        for num in data:\n\n            # Get the number of set most significant bits in the byte if\n            # this is the starting byte of an UTF-8 character.\n            mask = 1 << 7\n            if n_bytes == 0:\n                while mask & num:\n                    n_bytes += 1\n                    mask = mask >> 1\n\n                # 1 byte characters\n                if n_bytes == 0:\n                    continue\n\n                # Invalid scenarios according to the rules of the problem.\n                if n_bytes == 1 or n_bytes > 4:\n                    return False\n            else:\n\n                # If this byte is a part of an existing UTF-8 character, then we\n                # simply have to look at the two most significant bits and we make\n                # use of the masks we defined before.\n                if not (num & mask1 and not (num & mask2)):\n                    return False\n            n_bytes -= 1\n        return n_bytes == 0     ",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Bit Manipulation"
  ]
}