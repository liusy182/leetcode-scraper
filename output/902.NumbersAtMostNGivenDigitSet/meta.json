{
  "id": "902",
  "title": "Numbers At Most N Given Digit Set",
  "slug": "numbers-at-most-n-given-digit-set",
  "difficulty": "Hard",
  "likes": 111,
  "dislikes": 27,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "551",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "en4D5WXi": [
      {
        "code": "class Solution {\n    public int atMostNGivenDigitSet(String[] D, int N) {\n        String S = String.valueOf(N);\n        int K = S.length();\n        int[] dp = new int[K+1];\n        dp[K] = 1;\n\n        for (int i = K-1; i >= 0; --i) {\n            // compute dp[i]\n            int Si = S.charAt(i) - '0';\n            for (String d: D) {\n                if (Integer.valueOf(d) < Si)\n                    dp[i] += Math.pow(D.length, K-i-1);\n                else if (Integer.valueOf(d) == Si)\n                    dp[i] += dp[i+1];\n            }\n        }\n\n        for (int i = 1; i < K; ++i)\n            dp[0] += Math.pow(D.length, i);\n        return dp[0];\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def atMostNGivenDigitSet(self, D, N):\n        S = str(N)\n        K = len(S)\n        dp = [0] * K + [1]\n        # dp[i] = total number of valid integers if N was \"N[i:]\"\n\n        for i in xrange(K-1, -1, -1):\n            # Compute dp[i]\n\n            for d in D:\n                if d < S[i]:\n                    dp[i] += len(D) ** (K-i-1)\n                elif d == S[i]:\n                    dp[i] += dp[i+1]\n\n        return dp[0] + sum(len(D) ** i for i in xrange(1, K))",
        "langSlug": "python"
      }
    ],
    "bVuoAcr9": [
      {
        "code": "class Solution {\n    public int atMostNGivenDigitSet(String[] D, int N) {\n        int B = D.length; // bijective-base B\n        char[] ca = String.valueOf(N).toCharArray();\n        int K = ca.length;\n        int[] A = new int[K];\n        int t = 0;\n\n        for (char c: ca) {\n            int c_index = 0;  // Largest such that c >= D[c_index - 1]\n            boolean match = false;\n            for (int i = 0; i < B; ++i) {\n                if (c >= D[i].charAt(0))\n                    c_index = i+1;\n                if (c == D[i].charAt(0))\n                    match = true;\n            }\n\n            A[t++] = c_index;\n            if (match) continue;\n\n            if (c_index == 0) { // subtract 1\n                for (int j = t-1; j > 0; --j) {\n                    if (A[j] > 0) break;\n                    A[j] += B;\n                    A[j-1]--;\n                }\n            }\n\n            while (t < K)\n                A[t++] = B;\n            break;\n        }\n\n        int ans = 0;\n        for (int x: A)\n            ans = ans * B + x;\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def atMostNGivenDigitSet(self, D, N):\n        B = len(D) # bijective-base B\n        S = str(N)\n        K = len(S)\n        A = []  #  The largest valid number in bijective-base-B.\n\n        for c in S:\n            if c in D:\n                A.append(D.index(c) + 1)\n            else:\n                i = bisect.bisect(D, c)\n                A.append(i)\n                # i = 1 + (largest index j with c >= D[j], or -1 if impossible)\n                if i == 0:\n                    # subtract 1\n                    for j in xrange(len(A) - 1, 0, -1):\n                        if A[j]: break\n                        A[j] += B\n                        A[j-1] -= 1\n\n                A.extend([B] * (K - len(A)))\n                break\n\n        ans = 0\n        for x in A:\n            ans = ans * B + x\n        return ans",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Math",
    "Dynamic Programming"
  ]
}