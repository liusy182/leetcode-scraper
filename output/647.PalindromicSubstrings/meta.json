{
  "id": "647",
  "title": "Palindromic Substrings",
  "slug": "palindromic-substrings",
  "difficulty": "Medium",
  "likes": 1607,
  "dislikes": 82,
  "hints": [
    "How can we reuse a previously computed palindrome to compute a larger palindrome?",
    "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d and palindrome? Similarly is \u201cxabay\u201d a palindrome?",
    "Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation?"
  ],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Palindromic Subsequence\", \"titleSlug\": \"longest-palindromic-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindromic Substrings\", \"titleSlug\": \"palindromic-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "319",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "BoR2UhKv": [
      {
        "code": "class Solution {\n    public int countSubstrings(String S) {\n        int N = S.length(), ans = 0;\n        for (int center = 0; center <= 2*N-1; ++center) {\n            int left = center / 2;\n            int right = left + center % 2;\n            while (left >= 0 && right < N && S.charAt(left) == S.charAt(right)) {\n                ans++;\n                left--;\n                right++;\n            }\n        }\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def countSubstrings(self, S):\n        N = len(S)\n        ans = 0\n        for center in xrange(2*N - 1):\n            left = center / 2\n            right = left + center % 2\n            while left >= 0 and right < N and S[left] == S[right]:\n                ans += 1\n                left -= 1\n                right += 1\n        return ans",
        "langSlug": "python"
      }
    ],
    "dMCfKFBQ": [
      {
        "code": "class Solution {\n    public int countSubstrings(String S) {\n        char[] A = new char[2 * S.length() + 3];\n        A[0] = '@';\n        A[1] = '#';\n        A[A.length - 1] = '$';\n        int t = 2;\n        for (char c: S.toCharArray()) {\n            A[t++] = c;\n            A[t++] = '#';\n        }\n\n        int[] Z = new int[A.length];\n        int center = 0, right = 0;\n        for (int i = 1; i < Z.length - 1; ++i) {\n            if (i < right)\n                Z[i] = Math.min(right - i, Z[2 * center - i]);\n            while (A[i + Z[i] + 1] == A[i - Z[i] - 1])\n                Z[i]++;\n            if (i + Z[i] > right) {\n                center = i;\n                right = i + Z[i];\n            }\n        }\n        int ans = 0;\n        for (int v: Z) ans += (v + 1) / 2;\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "def countSubstrings(self, S):\n    def manachers(S):\n        A = '@#' + '#'.join(S) + '#$'\n        Z = [0] * len(A)\n        center = right = 0\n        for i in xrange(1, len(A) - 1):\n            if i < right:\n                Z[i] = min(right - i, Z[2 * center - i])\n            while A[i + Z[i] + 1] == A[i - Z[i] - 1]:\n                Z[i] += 1\n            if i + Z[i] > right:\n                center, right = i, i + Z[i]\n        return Z\n\n    return sum((v+1)/2 for v in manachers(S))",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "String",
    "Dynamic Programming"
  ]
}