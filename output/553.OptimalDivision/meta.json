{
  "id": "553",
  "title": "Optimal Division",
  "slug": "optimal-division",
  "difficulty": "Medium",
  "likes": 131,
  "dislikes": 992,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "108",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "CAbJyzm4": [
      {
        "code": "public class Solution {\n    public String optimalDivision(int[] nums) {\n        T t = optimal(nums, 0, nums.length - 1, \"\");\n        return t.max_str;\n    }\n    class T {\n        float max_val, min_val;\n        String min_str, max_str;\n    }\n    public T optimal(int[] nums, int start, int end, String res) {\n        T t = new T();\n        if (start == end) {\n            t.max_val = nums[start];\n            t.min_val = nums[start];\n            t.min_str = \"\" + nums[start];\n            t.max_str = \"\" + nums[start];\n            return t;\n        }\n        t.min_val = Float.MAX_VALUE;\n        t.max_val = Float.MIN_VALUE;\n        t.min_str = t.max_str = \"\";\n        for (int i = start; i < end; i++) {\n            T left = optimal(nums, start, i, \"\");\n            T right = optimal(nums, i + 1, end, \"\");\n            if (t.min_val > left.min_val / right.max_val) {\n                t.min_val = left.min_val / right.max_val;\n                t.min_str = left.min_str + \"/\" + (i + 1 != end ? \"(\" : \"\") + right.max_str + (i + 1 != end ? \")\" : \"\");\n            }\n            if (t.max_val < left.max_val / right.min_val) {\n                t.max_val = left.max_val / right.min_val;\n                t.max_str = left.max_str + \"/\" + (i + 1 != end ? \"(\" : \"\") + right.min_str + (i + 1 != end ? \")\" : \"\");\n            }\n        }\n        return t;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "xFgr7Cpd": [
      {
        "code": "public class Solution {\n    class T {\n        float max_val, min_val;\n        String min_str, max_str;\n    }\n    public String optimalDivision(int[] nums) {\n        T[][] memo = new T[nums.length][nums.length];\n        T t = optimal(nums, 0, nums.length - 1, \"\", memo);\n        return t.max_str;\n    }\n    public T optimal(int[] nums, int start, int end, String res, T[][] memo) {\n        if (memo[start][end] != null)\n            return memo[start][end];\n        T t = new T();\n        if (start == end) {\n            t.max_val = nums[start];\n            t.min_val = nums[start];\n            t.min_str = \"\" + nums[start];\n            t.max_str = \"\" + nums[start];\n            memo[start][end] = t;\n            return t;\n        }\n        t.min_val = Float.MAX_VALUE;\n        t.max_val = Float.MIN_VALUE;\n        t.min_str = t.max_str = \"\";\n        for (int i = start; i < end; i++) {\n            T left = optimal(nums, start, i, \"\", memo);\n            T right = optimal(nums, i + 1, end, \"\", memo);\n            if (t.min_val > left.min_val / right.max_val) {\n                t.min_val = left.min_val / right.max_val;\n                t.min_str = left.min_str + \"/\" + (i + 1 != end ? \"(\" : \"\") + right.max_str + (i + 1 != end ? \")\" : \"\");\n            }\n            if (t.max_val < left.max_val / right.min_val) {\n                t.max_val = left.max_val / right.min_val;\n                t.max_str = left.max_str + \"/\" + (i + 1 != end ? \"(\" : \"\") + right.min_str + (i + 1 != end ? \")\" : \"\");\n            }\n        }\n        memo[start][end] = t;\n        return t;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "wUbJEUre": [
      {
        "code": "public class Solution {\n    public String optimalDivision(int[] nums) {\n        if (nums.length == 1)\n            return nums[0] + \"\";\n        if (nums.length == 2)\n            return nums[0] + \"/\" + nums[1];\n        StringBuilder res = new StringBuilder(nums[0] + \"/(\" + nums[1]);\n        for (int i = 2; i < nums.length; i++) {\n            res.append(\"/\" + nums[i]);\n        }\n        res.append(\")\");\n        return res.toString();\n    }\n}\n",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Math",
    "String"
  ]
}