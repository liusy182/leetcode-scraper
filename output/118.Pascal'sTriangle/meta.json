{
  "id": "118",
  "title": "Pascal's Triangle",
  "slug": "pascals-triangle",
  "difficulty": "Easy",
  "likes": 835,
  "dislikes": 84,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Pascal's Triangle II\", \"titleSlug\": \"pascals-triangle-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "solution": {
    "id": "340",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "idrxbCSN": [
      {
        "code": "class Solution {\n    public List<List<Integer>> generate(int numRows) {\n        List<List<Integer>> triangle = new ArrayList<List<Integer>>();\n\n        // First base case; if user requests zero rows, they get zero rows.\n        if (numRows == 0) {\n            return triangle;\n        }\n\n        // Second base case; first row is always [1].\n        triangle.add(new ArrayList<>());\n        triangle.get(0).add(1);\n\n        for (int rowNum = 1; rowNum < numRows; rowNum++) {\n            List<Integer> row = new ArrayList<>();\n            List<Integer> prevRow = triangle.get(rowNum-1);\n\n            // The first row element is always 1.\n            row.add(1);\n\n            // Each triangle element (other than the first and last of each row)\n            // is equal to the sum of the elements above-and-to-the-left and\n            // above-and-to-the-right.\n            for (int j = 1; j < rowNum; j++) {\n                row.add(prevRow.get(j-1) + prevRow.get(j));\n            }\n\n            // The last row element is always 1.\n            row.add(1);\n\n            triangle.add(row);\n        }\n\n        return triangle;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def generate(self, num_rows):\n        triangle = []\n\n        for row_num in range(num_rows):\n            # The first and last row elements are always 1.\n            row = [None for _ in range(row_num+1)]\n            row[0], row[-1] = 1, 1\n\n            # Each triangle element is equal to the sum of the elements\n            # above-and-to-the-left and above-and-to-the-right.\n            for j in range(1, len(row)-1):\n                row[j] = triangle[row_num-1][j-1] + triangle[row_num-1][j]\n\n            triangle.append(row)\n\n        return triangle",
        "langSlug": "python3"
      }
    ]
  },
  "topicTags": [
    "Array"
  ]
}