{
  "id": "882",
  "title": "Reachable Nodes In Subdivided Graph",
  "slug": "reachable-nodes-in-subdivided-graph",
  "difficulty": "Hard",
  "likes": 107,
  "dislikes": 96,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "524",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "obqv6gh4": [
      {
        "code": "#define pii pair<int, int>\n\nclass Solution {\npublic:\n    int reachableNodes(vector<vector<int>>& edges, int M, int N) {\n        vector<vector<pii>> graph(N);\n        for (vector<int> edge: edges) {\n            int u = edge[0], v = edge[1], w = edge[2];\n            graph[u].push_back({v, w});\n            graph[v].push_back({u, w});\n        }\n\n        map<int, int> dist;\n        dist[0] = 0;\n        for (int i = 1; i < N; ++i)\n            dist[i] = M+1;\n\n        map<pii, int> used;\n        int ans = 0;\n\n        priority_queue<pii, vector<pii>, greater<pii>> pq;\n        pq.push({0, 0});\n\n        while (!pq.empty()) {\n            pii top = pq.top();\n            pq.pop();\n            int d = top.first, node = top.second;\n            if (d > dist[node]) continue;\n            dist[node] = d;\n\n            // Each node is only visited once.  We've reached\n            // a node in our original graph.\n            ans++;\n\n            for (auto pair: graph[node]) {\n                // M - d is how much further we can walk from this node;\n                // weight is how many new nodes there are on this edge.\n                // v is the maximum utilization of this edge.\n                int nei = pair.first;\n                int weight = pair.second;\n                used[{node, nei}] = min(weight, M - d);\n\n                // d2 is the total distance to reach 'nei' (neighbor) node\n                // in the original graph.\n                int d2 = d + weight + 1;\n                if (d2 < min(dist[nei], M+1)) {\n                    pq.push({d2, nei});\n                    dist[nei] = d2;\n                }\n            }\n        }\n\n        // At the end, each edge (u, v, w) can be used with a maximum\n        // of w new nodes: a max of used[u, v] nodes from one side,\n        // and used[v, u] nodes from the other.\n        for (vector<int> edge: edges) {\n            int u = edge[0], v = edge[1], w = edge[2];\n            ans += min(w, used[{u, v}] + used[{v, u}]);\n        }\n        return ans;\n    }\n};",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int reachableNodes(int[][] edges, int M, int N) {\n        Map<Integer, Map<Integer, Integer>> graph = new HashMap();\n        for (int[] edge: edges) {\n            int u = edge[0], v = edge[1], w = edge[2];\n            graph.computeIfAbsent(u, x->new HashMap()).put(v, w);\n            graph.computeIfAbsent(v, x->new HashMap()).put(u, w);\n        }\n\n        PriorityQueue<ANode> pq = new PriorityQueue<ANode>(\n            (a, b) -> Integer.compare(a.dist, b.dist));\n        pq.offer(new ANode(0, 0));\n\n        Map<Integer, Integer> dist = new HashMap();\n        dist.put(0, 0);\n        Map<Integer, Integer> used = new HashMap();\n        int ans = 0;\n\n        while (!pq.isEmpty()) {\n            ANode anode = pq.poll();\n            int node = anode.node;\n            int d = anode.dist;\n\n            if (d > dist.getOrDefault(node, 0)) continue;\n            // Each node is only visited once.  We've reached\n            // a node in our original graph.\n            ans++;\n\n            if (!graph.containsKey(node)) continue;\n            for (int nei: graph.get(node).keySet()) {\n                // M - d is how much further we can walk from this node;\n                // weight is how many new nodes there are on this edge.\n                // v is the maximum utilization of this edge.\n                int weight = graph.get(node).get(nei);\n                int v = Math.min(weight, M - d);\n                used.put(N * node + nei, v);\n\n                // d2 is the total distance to reach 'nei' (neighbor) node\n                // in the original graph.\n                int d2 = d + weight + 1;\n                if (d2 < dist.getOrDefault(nei, M+1)) {\n                    pq.offer(new ANode(nei, d2));\n                    dist.put(nei, d2);\n                }\n            }\n        }\n\n        // At the end, each edge (u, v, w) can be used with a maximum\n        // of w new nodes: a max of used[u, v] nodes from one side,\n        // and used[v, u] nodes from the other.\n        // [We use the encoding (u, v) = u * N + v.]\n        for (int[] edge: edges) {\n            ans += Math.min(edge[2], used.getOrDefault(edge[0] * N + edge[1], 0) +\n                                     used.getOrDefault(edge[1] * N + edge[0], 0) );\n        }\n\n        return ans;\n    }\n}\n\nclass ANode {\n    int node, dist;\n    ANode(int n, int d) {\n        node = n;\n        dist = d;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def reachableNodes(self, edges, M, N):\n        graph = collections.defaultdict(dict)\n        for u, v, w in edges:\n            graph[u][v] = graph[v][u] = w\n\n        pq = [(0, 0)]\n        dist = {0: 0}\n        used = {}\n        ans = 0\n\n        while pq:\n            d, node = heapq.heappop(pq)\n            if d > dist[node]: continue\n            # Each node is only visited once.  We've reached\n            # a node in our original graph.\n            ans += 1\n\n            for nei, weight in graph[node].iteritems():\n                # M - d is how much further we can walk from this node;\n                # weight is how many new nodes there are on this edge.\n                # v is the maximum utilization of this edge.\n                v = min(weight, M - d)\n                used[node, nei] = v\n\n                # d2 is the total distance to reach 'nei' (neighbor) node\n                # in the original graph.\n                d2 = d + weight + 1\n                if d2 < dist.get(nei, M+1):\n                    heapq.heappush(pq, (d2, nei))\n                    dist[nei] = d2\n\n        # At the end, each edge (u, v, w) can be used with a maximum\n        # of w new nodes: a max of used[u, v] nodes from one side,\n        # and used[v, u] nodes from the other.\n        for u, v, w in edges:\n            ans += min(w, used.get((u, v), 0) + used.get((v, u), 0))\n\n        return ans",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Heap"
  ]
}