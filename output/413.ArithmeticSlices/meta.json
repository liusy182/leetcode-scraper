{
  "id": "413",
  "title": "Arithmetic Slices",
  "slug": "arithmetic-slices",
  "difficulty": "Medium",
  "likes": 658,
  "dislikes": 133,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Arithmetic Slices II - Subsequence\", \"titleSlug\": \"arithmetic-slices-ii-subsequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "solution": {
    "id": "219",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "HT3WjgGf": [
      {
        "code": "public class Solution {\n    public int numberOfArithmeticSlices(int[] A) {\n        int count = 0;\n        for (int s = 0; s < A.length - 2; s++) {\n            int d = A[s + 1] - A[s];\n            for (int e = s + 2; e < A.length; e++) {\n                int i = 0;\n                for (i = s + 1; i <= e; i++)\n                    if (A[i] - A[i - 1] != d)\n                        break;\n                if (i > e)\n                    count++;\n            }\n        }\n        return count;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "NPDEAgTz": [
      {
        "code": "public class Solution {\n    public int numberOfArithmeticSlices(int[] A) {\n        int count = 0;\n        for (int s = 0; s < A.length - 2; s++) {\n            int d = A[s + 1] - A[s];\n            for (int e = s + 2; e < A.length; e++) {\n                if (A[e] - A[e - 1] == d)\n                    count++;\n                else\n                    break;\n            }\n        }\n        return count;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "WGzuREMw": [
      {
        "code": "public class Solution {\n    int sum = 0;\n    public int numberOfArithmeticSlices(int[] A) {\n        slices(A, A.length - 1);\n        return sum;\n    }\n    public int slices(int[] A, int i) {\n        if (i < 2)\n            return 0;\n        int ap = 0;\n        if (A[i] - A[i - 1] == A[i - 1] - A[i - 2]) {\n            ap = 1 + slices(A, i - 1);\n            sum += ap;\n        } else\n            slices(A, i - 1);\n        return ap;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "w8UZ2q6u": [
      {
        "code": "public class Solution {\n    public int numberOfArithmeticSlices(int[] A) {\n        int[] dp = new int[A.length];\n        int sum = 0;\n        for (int i = 2; i < dp.length; i++) {\n            if (A[i] - A[i - 1] == A[i - 1] - A[i - 2]) {\n                dp[i] = 1 + dp[i - 1];\n                sum += dp[i];\n            }\n        }\n        return sum;\n    }\n}\n",
        "langSlug": "java"
      }
    ],
    "mGEcWWi3": [
      {
        "code": "public class Solution {\n    public int numberOfArithmeticSlices(int[] A) {\n        int dp = 0;\n        int sum = 0;\n        for (int i = 2; i < A.length; i++) {\n            if (A[i] - A[i - 1] == A[i - 1] - A[i - 2]) {\n                dp = 1 + dp;\n                sum += dp;\n            } else\n                dp = 0;\n        }\n        return sum;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "fQULWrDF": [
      {
        "code": "public class Solution {\n    public int numberOfArithmeticSlices(int[] A) {\n        int count = 0;\n        int sum = 0;\n        for (int i = 2; i < A.length; i++) {\n            if (A[i] - A[i - 1] == A[i - 1] - A[i - 2]) {\n                count++;\n            } else {\n                sum += (count + 1) * (count) / 2;\n                count = 0;\n            }\n        }\n        return sum += count * (count + 1) / 2;\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Math",
    "Dynamic Programming"
  ]
}