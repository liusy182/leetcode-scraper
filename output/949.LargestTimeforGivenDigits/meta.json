{
  "id": "949",
  "title": "Largest Time for Given Digits",
  "slug": "largest-time-for-given-digits",
  "difficulty": "Easy",
  "likes": 85,
  "dislikes": 235,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "631",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "vzuf8WrS": [
      {
        "code": "// Solution inspired by @rock\nclass Solution {\n    public String largestTimeFromDigits(int[] A) {\n        int ans = -1;\n\n        // Choose different indices i, j, k, l as a permutation of 0, 1, 2, 3\n        for (int i = 0; i < 4; ++i)\n            for (int j = 0; j < 4; ++j) if (j != i)\n                for (int k = 0; k < 4; ++k) if (k != i && k != j) {\n                    int l = 6 - i - j - k;\n\n                    // For each permutation of A[i], read out the time and\n                    // record the largest legal time.\n                    int hours = 10 * A[i] + A[j];\n                    int mins = 10 * A[k] + A[l];\n                    if (hours < 24 && mins < 60)\n                        ans = Math.max(ans, hours * 60 + mins);\n                }\n\n        return ans >= 0 ? String.format(\"%02d:%02d\", ans / 60, ans % 60) : \"\";\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def largestTimeFromDigits(self, A):\n        ans = -1\n        for h1, h2, m1, m2 in itertools.permutations(A):\n            hours = 10 * h1 + h2\n            mins = 10 * m1 + m2\n            time = 60 * hours + mins\n            if 0 <= hours < 24 and 0 <= mins < 60 and time > ans:\n                ans = time\n\n        return \"{:02}:{:02}\".format(*divmod(ans, 60)) if ans >= 0 else \"\"",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Math"
  ]
}