{
  "id": "936",
  "title": "Stamping The Sequence",
  "slug": "stamping-the-sequence",
  "difficulty": "Hard",
  "likes": 106,
  "dislikes": 30,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "608",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "fePTAdQw": [
      {
        "code": "class Solution {\n    public int[] movesToStamp(String stamp, String target) {\n        int M = stamp.length(), N = target.length();\n        Queue<Integer> queue = new ArrayDeque();\n        boolean[] done = new boolean[N];\n        Stack<Integer> ans = new Stack();\n        List<Node> A = new ArrayList();\n\n        for (int i = 0; i <= N-M; ++i) {\n            // For each window [i, i+M), A[i] will contain\n            // info on what needs to change before we can\n            // reverse stamp at this window.\n\n            Set<Integer> made = new HashSet();\n            Set<Integer> todo = new HashSet();\n            for (int j = 0; j < M; ++j) {\n                if (target.charAt(i+j) == stamp.charAt(j))\n                    made.add(i+j);\n                else\n                    todo.add(i+j);\n            }\n\n            A.add(new Node(made, todo));\n\n            // If we can reverse stamp at i immediately,\n            // enqueue letters from this window.\n            if (todo.isEmpty()) {\n                ans.push(i);\n                for (int j = i; j < i + M; ++j) if (!done[j]) {\n                    queue.add(j);\n                    done[j] = true;\n                }\n            }\n        }\n\n        // For each enqueued letter (position),\n        while (!queue.isEmpty()) {\n            int i = queue.poll();\n\n            // For each window that is potentially affected,\n            // j: start of window\n            for (int j = Math.max(0, i-M+1); j <= Math.min(N-M, i); ++j) {\n                if (A.get(j).todo.contains(i)) {  // This window is affected\n                    A.get(j).todo.remove(i);\n                    if (A.get(j).todo.isEmpty()) {\n                        ans.push(j);\n                        for (int m: A.get(j).made) if (!done[m]) {\n                            queue.add(m);\n                            done[m] = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        for (boolean b: done)\n            if (!b) return new int[0];\n\n        int[] ret = new int[ans.size()];\n        int t = 0;\n        while (!ans.isEmpty())\n            ret[t++] = ans.pop();\n\n        return ret;\n    }\n}\n\nclass Node {\n    Set<Integer> made, todo;\n    Node(Set<Integer> m, Set<Integer> t) {\n        made = m;\n        todo = t;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def movesToStamp(self, stamp, target):\n        M, N = len(stamp), len(target)\n\n        queue = collections.deque()\n        done = [False] * N\n        ans = []\n        A = []\n        for i in xrange(N - M + 1):\n            # For each window [i, i+M),\n            # A[i] will contain info on what needs to change\n            # before we can reverse stamp at i.\n\n            made, todo = set(), set()\n            for j, c in enumerate(stamp):\n                a = target[i+j]\n                if a == c:\n                    made.add(i+j)\n                else:\n                    todo.add(i+j)\n            A.append((made, todo))\n\n            # If we can reverse stamp at i immediately,\n            # enqueue letters from this window.\n            if not todo:\n                ans.append(i)\n                for j in xrange(i, i + len(stamp)):\n                    if not done[j]:\n                        queue.append(j)\n                        done[j] = True\n\n        # For each enqueued letter,\n        while queue:\n            i = queue.popleft()\n\n            # For each window that is potentially affected,\n            # j: start of window\n            for j in xrange(max(0, i-M+1), min(N-M, i)+1):\n                if i in A[j][1]:  # This window is affected\n                    A[j][1].discard(i) # Remove it from todo list of this window\n                    if not A[j][1]:  # Todo list of this window is empty\n                        ans.append(j)\n                        for m in A[j][0]: # For each letter to potentially enqueue,\n                            if not done[m]:\n                                queue.append(m)\n                                done[m] = True\n\n        return ans[::-1] if all(done) else []",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "String",
    "Greedy"
  ]
}