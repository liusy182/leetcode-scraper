{
  "id": "939",
  "title": "Minimum Area Rectangle",
  "slug": "minimum-area-rectangle",
  "difficulty": "Medium",
  "likes": 329,
  "dislikes": 63,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "612",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "kTVsWSQg": [
      {
        "code": "class Solution {\n    public int minAreaRect(int[][] points) {\n        Map<Integer, List<Integer>> rows = new TreeMap();\n        for (int[] point: points) {\n            int x = point[0], y = point[1];\n            rows.computeIfAbsent(x, z-> new ArrayList()).add(y);\n        }\n\n        int ans = Integer.MAX_VALUE;\n        Map<Integer, Integer> lastx = new HashMap();\n        for (int x: rows.keySet()) {\n            List<Integer> row = rows.get(x);\n            Collections.sort(row);\n            for (int i = 0; i < row.size(); ++i)\n                for (int j = i+1; j < row.size(); ++j) {\n                    int y1 = row.get(i), y2 = row.get(j);\n                    int code = 40001 * y1 + y2;\n                    if (lastx.containsKey(code))\n                        ans = Math.min(ans, (x - lastx.get(code)) * (y2-y1));\n                    lastx.put(code, x);\n                }\n        }\n\n        return ans < Integer.MAX_VALUE ? ans : 0;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minAreaRect(self, points):\n        columns = collections.defaultdict(list)\n        for x, y in points:\n            columns[x].append(y)\n        lastx = {}\n        ans = float('inf')\n\n        for x in sorted(columns):\n            column = columns[x]\n            column.sort()\n            for j, y2 in enumerate(column):\n                for i in xrange(j):\n                    y1 = column[i]\n                    if (y1, y2) in lastx:\n                        ans = min(ans, (x - lastx[y1,y2]) * (y2 - y1))\n                    lastx[y1, y2] = x\n        return ans if ans < float('inf') else 0",
        "langSlug": "python"
      }
    ],
    "x8SzczGY": [
      {
        "code": "class Solution {\n    public int minAreaRect(int[][] points) {\n        Set<Integer> pointSet = new HashSet();\n        for (int[] point: points)\n            pointSet.add(40001 * point[0] + point[1]);\n\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < points.length; ++i)\n            for (int j = i+1; j < points.length; ++j) {\n                if (points[i][0] != points[j][0] && points[i][1] != points[j][1]) {\n                    if (pointSet.contains(40001 * points[i][0] + points[j][1]) &&\n                            pointSet.contains(40001 * points[j][0] + points[i][1])) {\n                        ans = Math.min(ans, Math.abs(points[j][0] - points[i][0]) *\n                                            Math.abs(points[j][1] - points[i][1]));\n                    }\n                }\n            }\n\n        return ans < Integer.MAX_VALUE ? ans : 0;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minAreaRect(self, points):\n        S = set(map(tuple, points))\n        ans = float('inf')\n        for j, p2 in enumerate(points):\n            for i in xrange(j):\n                p1 = points[i]\n                if (p1[0] != p2[0] and p1[1] != p2[1] and\n                        (p1[0], p2[1]) in S and (p2[0], p1[1]) in S):\n                    ans = min(ans, abs(p2[0] - p1[0]) * abs(p2[1] - p1[1]))\n        return ans if ans < float('inf') else 0",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Hash Table"
  ]
}