{
  "id": "879",
  "title": "Profitable Schemes",
  "slug": "profitable-schemes",
  "difficulty": "Hard",
  "likes": 164,
  "dislikes": 20,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "523",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "gFHdtSWS": [
      {
        "code": "class Solution {\npublic:\n    int profitableSchemes(int G, int P, vector<int>& group, vector<int>& profit) {\n        int MOD = 1e9 + 7;\n        int N = group.size();\n\n        long dp[2][P+1][G+1];\n        memset(dp, 0, sizeof(dp));\n        dp[0][0][0] = 1;\n\n        for (int i = 0; i < N; ++i) {\n            int p0 = profit[i];  // the current crime profit\n            int g0 = group[i];  // the current crime group size\n\n            long (*cur)[G+1] = dp[i % 2];\n            long (*cur2)[G+1] = dp[(i + 1) % 2];\n\n            // Deep copy cur into cur2\n            for (int jp = 0; jp <= P; ++jp)\n                for (int jg = 0; jg <= G; ++jg)\n                    cur2[jp][jg] = cur[jp][jg];\n\n            for (int p1 = 0; p1 <= P; ++p1) {  // p1 : the current profit\n                // p2 : the new profit after committing this crime\n                int p2 = min(p1 + p0, P);\n                for (int g1 = 0; g1 <= G - g0; ++g1) {  // g1 : the current group size\n                    // g2 : the new group size after committing this crime\n                    int g2 = g1 + g0;\n                    cur2[p2][g2] += cur[p1][g1];\n                    cur2[p2][g2] %= MOD;\n                }\n            }\n        }\n\n        // Sum all schemes with profit P and group size 0 <= g <= G.\n        long ans = 0;\n        for (long x: dp[N % 2][P])\n            ans += x;\n\n        return (int) (ans % MOD);\n    }\n};",
        "langSlug": "cpp"
      },
      {
        "code": "class Solution {\n    public int profitableSchemes(int G, int P, int[] group, int[] profit) {\n        int MOD = 1_000_000_007;\n        int N = group.length;\n        long[][][] dp = new long[2][P+1][G+1];\n        dp[0][0][0] = 1;\n\n        for (int i = 0; i < N; ++i) {\n            int p0 = profit[i];  // the current crime profit\n            int g0 = group[i];  // the current crime group size\n\n            long[][] cur = dp[i % 2];\n            long[][] cur2 = dp[(i + 1) % 2];\n\n            // Deep copy cur into cur2\n            for (int jp = 0; jp <= P; ++jp)\n                for (int jg = 0; jg <= G; ++jg)\n                    cur2[jp][jg] = cur[jp][jg];\n\n            for (int p1 = 0; p1 <= P; ++p1) {  // p1 : the current profit\n                // p2 : the new profit after committing this crime\n                int p2 = Math.min(p1 + p0, P);\n                for (int g1 = 0; g1 <= G - g0; ++g1) {  // g1 : the current group size\n                    // g2 : the new group size after committing this crime\n                    int g2 = g1 + g0;\n                    cur2[p2][g2] += cur[p1][g1];\n                    cur2[p2][g2] %= MOD;\n                }\n            }\n        }\n\n        // Sum all schemes with profit P and group size 0 <= g <= G.\n        long ans = 0;\n        for (long x: dp[N%2][P])\n            ans += x;\n\n        return (int) ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def profitableSchemes(self, G, P, group, profit):\n        MOD = 10**9 + 7\n        cur = [[0] * (G + 1) for _ in xrange(P + 1)]\n        cur[0][0] = 1\n\n        for p0, g0 in zip(profit, group):\n            # p0, g0 : the current crime profit and group size\n            cur2 = [row[:] for row in cur]\n            for p1 in xrange(P + 1):\n                # p1 : the current profit\n                # p2 : the new profit after committing this crime\n                p2 = min(p1 + p0, P)\n                for g1 in xrange(G - g0 + 1):\n                    # g1 : the current group size\n                    # g2 : the new group size after committing this crime\n                    g2 = g1 + g0\n                    cur2[p2][g2] += cur[p1][g1]\n                    cur2[p2][g2] %= MOD\n            cur = cur2\n\n        # Sum all schemes with profit P and group size 0 <= g <= G.\n        return sum(cur[-1]) % MOD",
        "langSlug": "python"
      },
      {
        "code": "var profitableSchemes = function(G, P, group, profit) {\n    const MOD = 1e9 + 7;\n    const N = group.length;\n    let cur = Array(P + 1).fill(0).map(() => Array(G + 1).fill(0));\n    cur[0][0] = 1;\n\n    for (let i = 0; i < N; ++i) {\n        // p0, g0 : the current crime profit and group size\n        let p0 = profit[i];\n        let g0 = group[i];\n\n        // Set cur2 as a deep copy of cur.\n        let cur2 = Array(P + 1).fill(0).map((_, i) => cur[i].slice(0));\n\n        for (let p1 = 0; p1 <= P; ++p1) {  // p1 : the current profit\n            // p2 : the new profit after committing this crime\n            let p2 = Math.min(p1 + p0, P);\n            for (let g1 = 0; g1 <= G - g0; ++g1) {  // g1 : the current group size\n                // g2 : the new group size after committing this crime\n                let g2 = g1 + g0;\n                cur2[p2][g2] += cur[p1][g1];\n                cur2[p2][g2] %= MOD;\n            }\n        }\n\n        cur = cur2;\n    }\n\n    // Sum all schemes with profit P and group size 0 <= g <= G.\n    ans = 0;\n    for (let x of cur[P])\n        ans += x;\n    return ans % MOD;\n};",
        "langSlug": "javascript"
      }
    ]
  },
  "topicTags": [
    "Dynamic Programming"
  ]
}