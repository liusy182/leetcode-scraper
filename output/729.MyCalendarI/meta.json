{
  "id": "729",
  "title": "My Calendar I",
  "slug": "my-calendar-i",
  "difficulty": "Medium",
  "likes": 420,
  "dislikes": 27,
  "hints": [
    "Store the events as a sorted list of intervals.  If none of the events conflict, then the new event can be added."
  ],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"My Calendar II\", \"titleSlug\": \"my-calendar-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"My Calendar III\", \"titleSlug\": \"my-calendar-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "solution": {
    "id": "297",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "RbxQb2Zj": [
      {
        "code": "public class MyCalendar {\n    List<int[]> calendar;\n\n    MyCalendar() {\n        calendar = new ArrayList();\n    }\n\n    public boolean book(int start, int end) {\n        for (int[] iv: calendar) {\n            if (iv[0] < end && start < iv[1]) return false;\n        }\n        calendar.add(new int[]{start, end});\n        return true;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class MyCalendar(object):\n    def __init__(self):\n        self.calendar = []\n\n    def book(self, start, end):\n        for s, e in self.calendar:\n            if s < end and start < e:\n                return False\n        self.calendar.append((start, end))\n        return True",
        "langSlug": "python"
      }
    ],
    "huRxLsMu": [
      {
        "code": "class MyCalendar {\n    TreeMap<Integer, Integer> calendar;\n\n    MyCalendar() {\n        calendar = new TreeMap();\n    }\n\n    public boolean book(int start, int end) {\n        Integer prev = calendar.floorKey(start),\n                next = calendar.ceilingKey(start);\n        if ((prev == null || calendar.get(prev) <= start) &&\n                (next == null || end <= next)) {\n            calendar.put(start, end);\n            return true;\n        }\n        return false;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Node:\n    __slots__ = 'start', 'end', 'left', 'right'\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n        self.left = self.right = None\n\n    def insert(self, node):\n        if node.start >= self.end:\n            if not self.right:\n                self.right = node\n                return True\n            return self.right.insert(node)\n        elif node.end <= self.start:\n            if not self.left:\n                self.left = node\n                return True\n            return self.left.insert(node)\n        else:\n            return False\n\nclass MyCalendar(object):\n    def __init__(self):\n        self.root = None\n\n    def book(self, start, end):\n        if self.root is None:\n            self.root = Node(start, end)\n            return True\n        return self.root.insert(Node(start, end))",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Array"
  ]
}