{
  "id": "935",
  "title": "Knight Dialer",
  "slug": "knight-dialer",
  "difficulty": "Medium",
  "likes": 287,
  "dislikes": 96,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "609",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "EirthMi4": [
      {
        "code": "class Solution {\n    public int knightDialer(int N) {\n        int MOD = 1_000_000_007;\n        int[][] moves = new int[][]{\n            {4,6},{6,8},{7,9},{4,8},{3,9,0},\n            {},{1,7,0},{2,6},{1,3},{2,4}};\n\n        int[][] dp = new int[2][10];\n        Arrays.fill(dp[0], 1);\n        for (int hops = 0; hops < N-1; ++hops) {\n            Arrays.fill(dp[~hops & 1], 0);\n            for (int node = 0; node < 10; ++node)\n                for (int nei: moves[node]) {\n                    dp[~hops & 1][nei] += dp[hops & 1][node];\n                    dp[~hops & 1][nei] %= MOD;\n                }\n        }\n\n        long ans = 0;\n        for (int x: dp[~N & 1])\n            ans += x;\n        return (int) (ans % MOD);\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def knightDialer(self, N):\n        MOD = 10**9 + 7\n        moves = [[4,6],[6,8],[7,9],[4,8],[3,9,0],[],\n                     [1,7,0],[2,6],[1,3],[2,4]]\n\n        dp = [1] * 10\n        for hops in xrange(N-1):\n            dp2 = [0] * 10\n            for node, count in enumerate(dp):\n                for nei in moves[node]:\n                    dp2[nei] += count\n                    dp2[nei] %= MOD\n            dp = dp2\n        return sum(dp) % MOD",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Dynamic Programming"
  ],
  "images": {
    "knight-dialer_1.png": "https://assets.leetcode.com/uploads/2018/10/30/keypad.png"
  }
}