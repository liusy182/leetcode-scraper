{
  "id": "92",
  "title": "Reverse Linked List II",
  "slug": "reverse-linked-list-ii",
  "difficulty": "Medium",
  "likes": 1430,
  "dislikes": 100,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Reverse Linked List\", \"titleSlug\": \"reverse-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "solution": {
    "id": "661",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "XNyieviy": [
      {
        "code": "class Solution {\n\n    // Object level variables since we need the changes\n    // to persist across recursive calls and Java is pass by value.\n    private boolean stop;\n    private ListNode left;\n\n    public void recurseAndReverse(ListNode right, int m, int n) {\n\n        // base case. Don't proceed any further\n        if (n == 1) {\n            return;\n        }\n\n        // Keep moving the right pointer one step forward until (n == 1)\n        right = right.next;\n\n        // Keep moving left pointer to the right until we reach the proper node\n        // from where the reversal is to start.\n        if (m > 1) {\n            this.left = this.left.next;\n        }\n\n        // Recurse with m and n reduced.\n        this.recurseAndReverse(right, m - 1, n - 1);\n\n        // In case both the pointers cross each other or become equal, we\n        // stop i.e. don't swap data any further. We are done reversing at this\n        // point.\n        if (this.left == right || right.next == this.left) {\n            this.stop = true;            \n        }\n\n        // Until the boolean stop is false, swap data between the two pointers\n        if (!this.stop) {\n            int t = this.left.val;\n            this.left.val = right.val;\n            right.val = t;\n\n            // Move left one step to the right.\n            // The right pointer moves one step back via backtracking.\n            this.left = this.left.next;\n        }\n    }\n\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n        this.left = head;\n        this.stop = false;\n        this.recurseAndReverse(head, m, n);\n        return head;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def reverseBetween(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n\n        if not head:\n            return None\n\n        left, right = head, head\n        stop = False\n        def recurseAndReverse(right, m, n):\n            nonlocal left, stop\n\n            # base case. Don't proceed any further\n            if n == 1:\n                return\n\n            # Keep moving the right pointer one step forward until (n == 1)\n            right = right.next\n\n            # Keep moving left pointer to the right until we reach the proper node\n            # from where the reversal is to start.\n            if m > 1:\n                left = left.next\n\n            # Recurse with m and n reduced.\n            recurseAndReverse(right, m - 1, n - 1)\n\n            # In case both the pointers cross each other or become equal, we\n            # stop i.e. don't swap data any further. We are done reversing at this\n            # point.\n            if left == right or right.next == left:\n                stop = True\n\n            # Until the boolean stop is false, swap data between the two pointers     \n            if not stop:\n                left.val, right.val = right.val, left.val\n\n                # Move left one step to the right.\n                # The right pointer moves one step back via backtracking.\n                left = left.next           \n\n        recurseAndReverse(right, m, n)\n        return head",
        "langSlug": "python"
      }
    ],
    "EUGQLPwW": [
      {
        "code": "class Solution {\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n\n        // Empty list\n        if (head == null) {\n            return null;\n        }\n\n        // Move the two pointers until they reach the proper starting point\n        // in the list.\n        ListNode cur = head, prev = null;\n        while (m > 1) {\n            prev = cur;\n            cur = cur.next;\n            m--;\n            n--;\n        }\n\n        // The two pointers that will fix the final connections.\n        ListNode con = prev, tail = cur;\n\n        // Iteratively reverse the nodes until n becomes 0.\n        ListNode third = null;\n        while (n > 0) {\n            third = cur.next;\n            cur.next = prev;\n            prev = cur;\n            cur = third;\n            n--;\n        }\n\n        // Adjust the final connections as explained in the algorithm\n        if (con != null) {\n            con.next = prev;\n        } else {\n            head = prev;\n        }\n\n        tail.next = cur;\n        return head;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def reverseBetween(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n\n        # Empty list\n        if not head:\n            return None\n\n        # Move the two pointers until they reach the proper starting point\n        # in the list.\n        cur, prev = head, None\n        while m > 1:\n            prev = cur\n            cur = cur.next\n            m, n = m - 1, n - 1\n\n        # The two pointers that will fix the final connections.\n        tail, con = cur, prev\n\n        # Iteratively reverse the nodes until n becomes 0.\n        while n:\n            third = cur.next\n            cur.next = prev\n            prev = cur\n            cur = third\n            n -= 1\n\n        # Adjust the final connections as explained in the algorithm\n        if con:\n            con.next = prev\n        else:\n            head = prev\n        tail.next = cur\n        return head",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Linked List"
  ]
}