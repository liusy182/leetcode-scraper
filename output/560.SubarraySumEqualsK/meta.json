{
  "id": "560",
  "title": "Subarray Sum Equals K",
  "slug": "subarray-sum-equals-k",
  "difficulty": "Medium",
  "likes": 2392,
  "dislikes": 67,
  "hints": [
    "Will Brute force work here? Try to optimize it.",
    "Can we optimize it by using some extra space?",
    "What about storing sum frequencies in a hash table? Will it be useful?",
    "sum(i,j)=sum(0,j)-sum(0,i), where sum(i,j) represents the sum of all the elements from index i to j-1.\r\n\r\nCan we use this property to optimize it."
  ],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Continuous Subarray Sum\", \"titleSlug\": \"continuous-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarray Product Less Than K\", \"titleSlug\": \"subarray-product-less-than-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Pivot Index\", \"titleSlug\": \"find-pivot-index\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Subarray Sums Divisible by K\", \"titleSlug\": \"subarray-sums-divisible-by-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "119",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "uzdLhWrz": [
      {
        "code": "public class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0;\n        for (int start = 0; start < nums.length; start++) {\n            for (int end = start + 1; end <= nums.length; end++) {\n                int sum = 0;\n                for (int i = start; i < end; i++)\n                    sum += nums[i];\n                if (sum == k)\n                    count++;\n            }\n        }\n        return count;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "YnknRnC6": [
      {
        "code": "public class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0;\n        int[] sum = new int[nums.length + 1];\n        sum[0] = 0;\n        for (int i = 1; i <= nums.length; i++)\n            sum[i] = sum[i - 1] + nums[i - 1];\n        for (int start = 0; start < nums.length; start++) {\n            for (int end = start + 1; end <= nums.length; end++) {\n                if (sum[end] - sum[start] == k)\n                    count++;\n            }\n        }\n        return count;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "MGuUEEUy": [
      {
        "code": "public class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0;\n        for (int start = 0; start < nums.length; start++) {\n            int sum=0;\n            for (int end = start; end < nums.length; end++) {\n                sum+=nums[end];\n                if (sum == k)\n                    count++;\n            }\n        }\n        return count;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "S6xciAtN": [
      {
        "code": "public class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0, sum = 0;\n        HashMap < Integer, Integer > map = new HashMap < > ();\n        map.put(0, 1);\n        for (int i = 0; i < nums.length; i++) {\n            sum += nums[i];\n            if (map.containsKey(sum - k))\n                count += map.get(sum - k);\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        return count;\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Array",
    "Hash Table"
  ]
}