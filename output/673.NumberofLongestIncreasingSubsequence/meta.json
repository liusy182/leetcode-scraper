{
  "id": "673",
  "title": "Number of Longest Increasing Subsequence",
  "slug": "number-of-longest-increasing-subsequence",
  "difficulty": "Medium",
  "likes": 898,
  "dislikes": 63,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Continuous Increasing Subsequence\", \"titleSlug\": \"longest-continuous-increasing-subsequence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "solution": {
    "id": "279",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "NY6NUMPF": [
      {
        "code": "class Solution {\n    public int findNumberOfLIS(int[] nums) {\n        int N = nums.length;\n        if (N <= 1) return N;\n        int[] lengths = new int[N]; //lengths[i] = length of longest ending in nums[i]\n        int[] counts = new int[N]; //count[i] = number of longest ending in nums[i]\n        Arrays.fill(counts, 1);\n\n        for (int j = 0; j < N; ++j) {\n            for (int i = 0; i < j; ++i) if (nums[i] < nums[j]) {\n                if (lengths[i] >= lengths[j]) {\n                    lengths[j] = lengths[i] + 1;\n                    counts[j] = counts[i];\n                } else if (lengths[i] + 1 == lengths[j]) {\n                    counts[j] += counts[i];\n                }\n            }\n        }\n\n        int longest = 0, ans = 0;\n        for (int length: lengths) {\n            longest = Math.max(longest, length);\n        }\n        for (int i = 0; i < N; ++i) {\n            if (lengths[i] == longest) {\n                ans += counts[i];\n            }\n        }\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def findNumberOfLIS(self, nums):\n        N = len(nums)\n        if N <= 1: return N\n        lengths = [0] * N #lengths[i] = longest ending in nums[i]\n        counts = [1] * N #count[i] = number of longest ending in nums[i]\n\n        for j, num in enumerate(nums):\n            for i in xrange(j):\n                if nums[i] < nums[j]:\n                    if lengths[i] >= lengths[j]:\n                        lengths[j] = 1 + lengths[i]\n                        counts[j] = counts[i]\n                    elif lengths[i] + 1 == lengths[j]:\n                        counts[j] += counts[i]\n\n        longest = max(lengths)\n        return sum(c for i, c in enumerate(counts) if lengths[i] == longest)",
        "langSlug": "python"
      }
    ],
    "JqcEDf3A": [
      {
        "code": "class Solution {\n    public Value merge(Value v1, Value v2) {\n        if (v1.length == v2.length) {\n            if (v1.length == 0) return new Value(0, 1);\n            return new Value(v1.length, v1.count + v2.count);\n        }\n        return v1.length > v2.length ? v1 : v2;\n    }\n\n    public void insert(Node node, int key, Value val) {\n        if (node.range_left == node.range_right) {\n            node.val = merge(val, node.val);\n            return;\n        } else if (key <= node.getRangeMid()) {\n            insert(node.getLeft(), key, val);\n        } else {\n            insert(node.getRight(), key, val);\n        }\n        node.val = merge(node.getLeft().val, node.getRight().val);\n    }\n\n    public Value query(Node node, int key) {\n        if (node.range_right <= key) return node.val;\n        else if (node.range_left > key) return new Value(0, 1);\n        else return merge(query(node.getLeft(), key), query(node.getRight(), key));\n    }\n\n    public int findNumberOfLIS(int[] nums) {\n        if (nums.length == 0) return 0;\n        int min = nums[0], max = nums[0];\n        for (int num: nums) {\n            min = Math.min(min, num);\n            max = Math.max(max, num);\n        }\n        Node root = new Node(min, max);\n        for (int num: nums) {\n            Value v = query(root, num-1);\n            insert(root, num, new Value(v.length + 1, v.count));\n        }\n        return root.val.count;\n    }\n}\n\nclass Node {\n    int range_left, range_right;\n    Node left, right;\n    Value val;\n    public Node(int start, int end) {\n        range_left = start;\n        range_right = end;\n        left = null;\n        right = null;\n        val = new Value(0, 1);\n    }\n    public int getRangeMid() {\n        return range_left + (range_right - range_left) / 2;\n    }\n    public Node getLeft() {\n        if (left == null) left = new Node(range_left, getRangeMid());\n        return left;\n    }\n    public Node getRight() {\n        if (right == null) right = new Node(getRangeMid() + 1, range_right);\n        return right;\n    }\n}\n\nclass Value {\n    int length;\n    int count;\n    public Value(int len, int ct) {\n        length = len;\n        count = ct;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Node(object):\n    def __init__(self, start, end):\n        self.range_left, self.range_right = start, end\n        self._left = self._right = None\n        self.val = 0, 1 #length, count\n    @property\n    def range_mid(self):\n        return (self.range_left + self.range_right) / 2\n    @property\n    def left(self):\n        self._left = self._left or Node(self.range_left, self.range_mid)\n        return self._left\n    @property\n    def right(self):\n        self._right = self._right or Node(self.range_mid + 1, self.range_right)\n        return self._right\n\ndef merge(v1, v2):\n    if v1[0] == v2[0]:\n        if v1[0] == 0: return (0, 1)\n        return v1[0], v1[1] + v2[1]\n    return max(v1, v2)\n\ndef insert(node, key, val):\n    if node.range_left == node.range_right:\n        node.val = merge(val, node.val)\n        return\n    if key <= node.range_mid:\n        insert(node.left, key, val)\n    else:\n        insert(node.right, key, val)\n    node.val = merge(node.left.val, node.right.val)\n\ndef query(node, key):\n    if node.range_right <= key:\n        return node.val\n    elif node.range_left > key:\n        return 0, 1\n    else:\n        return merge(query(node.left, key), query(node.right, key))\n\nclass Solution(object):\n    def findNumberOfLIS(self, nums):\n        if not nums: return 0\n        root = Node(min(nums), max(nums))\n        for num in nums:\n            length, count = query(root, num-1)\n            insert(root, num, (length+1, count))\n        return root.val[1]",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Dynamic Programming"
  ]
}