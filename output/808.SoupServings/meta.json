{
  "id": "808",
  "title": "Soup Servings",
  "slug": "soup-servings",
  "difficulty": "Medium",
  "likes": 104,
  "dislikes": 378,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "441",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "aS5JpTPa": [
      {
        "code": "class Solution {\n    public double soupServings(int N) {\n        N = N/25 + (N%25 > 0 ? 1 : 0);\n        if (N >= 500) return 1.0;\n\n        double[][] memo = new double[N+1][N+1];\n        for (int s = 0; s <= 2*N; ++s) {\n            for (int i = 0; i <= N; ++i) {\n                int j = s-i;\n                if (j < 0 || j > N) continue;\n                double ans = 0.0;\n                if (i == 0) ans = 1.0;\n                if (i == 0 && j == 0) ans = 0.5;\n                if (i > 0 && j > 0) {\n                    ans = 0.25 * (memo[M(i-4)][j] + memo[M(i-3)][M(j-1)] +\n                                  memo[M(i-2)][M(j-2)] + memo[M(i-1)][M(j-3)]);\n                }\n                memo[i][j] = ans;\n\n            }\n        }\n        return memo[N][N];\n    }\n\n    public int M(int x) { return Math.max(0, x); }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def soupServings(self, N):\n        Q, R = divmod(N, 25)\n        N = Q + (R > 0)\n        if N >= 500: return 1\n\n        memo = {}\n        def dp(x, y):\n            if (x, y) not in memo:\n                if x <= 0 or y <= 0:\n                    ans = 0.5 if x<=0 and y<=0 else 1.0 if x<=0 else 0.0\n                else:\n                    ans = 0.25 * (dp(x-4,y)+dp(x-3,y-1)+dp(x-2,y-2)+dp(x-1,y-3))\n                memo[x, y] = ans\n            return memo[x, y]\n\n        return dp(N, N)",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Dynamic Programming"
  ]
}