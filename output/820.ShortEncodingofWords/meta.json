{
  "id": "820",
  "title": "Short Encoding of Words",
  "slug": "short-encoding-of-words",
  "difficulty": "Medium",
  "likes": 173,
  "dislikes": 46,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "454",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "gV8UXxb3": [
      {
        "code": "class Solution {\n    public int minimumLengthEncoding(String[] words) {\n        Set<String> good = new HashSet(Arrays.asList(words));\n        for (String word: words) {\n            for (int k = 1; k < word.length(); ++k)\n                good.remove(word.substring(k));\n        }\n\n        int ans = 0;\n        for (String word: good)\n            ans += word.length() + 1;\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumLengthEncoding(self, words):\n        good = set(words)\n        for word in words:\n            for k in range(1, len(word)):\n                good.discard(word[k:])\n\n        return sum(len(word) + 1 for word in good)",
        "langSlug": "python"
      }
    ],
    "whsBS94T": [
      {
        "code": "class Solution {\n    public int minimumLengthEncoding(String[] words) {\n        TrieNode trie = new TrieNode();\n        Map<TrieNode, Integer> nodes = new HashMap();\n\n        for (int i = 0; i < words.length; ++i) {\n            String word = words[i];\n            TrieNode cur = trie;\n            for (int j = word.length() - 1; j >= 0; --j)\n                cur = cur.get(word.charAt(j));\n            nodes.put(cur, i);\n        }\n\n        int ans = 0;\n        for (TrieNode node: nodes.keySet()) {\n            if (node.count == 0)\n                ans += words[nodes.get(node)].length() + 1;\n        }\n        return ans;\n\n    }\n}\n\nclass TrieNode {\n    TrieNode[] children;\n    int count;\n    TrieNode() {\n        children = new TrieNode[26];\n        count = 0;\n    }\n    public TrieNode get(char c) {\n        if (children[c-'a'] == null) {\n            children[c-'a'] = new TrieNode();\n            count++;\n        }\n        return children[c - 'a'];\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def minimumLengthEncoding(self, words):\n        words = list(set(words)) #remove duplicates\n        #Trie is a nested dictionary with nodes created\n        # when fetched entries are missing\n        Trie = lambda: collections.defaultdict(Trie)\n        trie = Trie()\n\n        #reduce(..., S, trie) is trie[S[0]][S[1]][S[2]][...][S[S.length - 1]]\n        nodes = [reduce(dict.__getitem__, word[::-1], trie)\n                 for word in words]\n\n        #Add word to the answer if it's node has no neighbors\n        return sum(len(word) + 1\n                   for i, word in enumerate(words)\n                   if len(nodes[i]) == 0)",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": []
}