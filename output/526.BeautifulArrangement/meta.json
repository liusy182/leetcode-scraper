{
  "id": "526",
  "title": "Beautiful Arrangement",
  "slug": "beautiful-arrangement",
  "difficulty": "Medium",
  "likes": 477,
  "dislikes": 116,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Beautiful Arrangement II\", \"titleSlug\": \"beautiful-arrangement-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "118",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "PqSksc2S": [
      {
        "code": "\npublic class Solution {\n    int count = 0;\n    public int countArrangement(int N) {\n        int[] nums = new int[N];\n        for (int i = 1; i <= N; i++)\n            nums[i - 1] = i;\n        permute(nums, 0);\n        return count;\n    }\n    public void permute(int[] nums, int l) {\n        if (l == nums.length - 1) {\n            int i;\n            for (i = 1; i <= nums.length; i++) {\n                if (nums[i - 1] % i != 0 && i % nums[i - 1] != 0)\n                    break;\n            }\n            if (i == nums.length + 1) {\n                count++;\n            }\n        }\n        for (int i = l; i < nums.length; i++) {\n            swap(nums, i, l);\n            permute(nums, l + 1);\n            swap(nums, i, l);\n        }\n    }\n    public void swap(int[] nums, int x, int y) {\n        int temp = nums[x];\n        nums[x] = nums[y];\n        nums[y] = temp;\n    }\n}\n",
        "langSlug": "java"
      }
    ],
    "WQVaxmVy": [
      {
        "code": "\npublic class Solution {\n    int count = 0;\n    public int countArrangement(int N) {\n        int[] nums = new int[N];\n        for (int i = 1; i <= N; i++)\n            nums[i - 1] = i;\n        permute(nums, 0);\n        return count;\n    }\n    public void permute(int[] nums, int l) {\n        if (l == nums.length) {\n            count++;\n        }\n        for (int i = l; i < nums.length; i++) {\n            swap(nums, i, l);\n            if (nums[l] % (l + 1) == 0 || (l + 1) % nums[l] == 0)\n                permute(nums, l + 1);\n            swap(nums, i, l);\n        }\n    }\n    public void swap(int[] nums, int x, int y) {\n        int temp = nums[x];\n        nums[x] = nums[y];\n        nums[y] = temp;\n    }\n}",
        "langSlug": "java"
      }
    ],
    "cBVwozT4": [
      {
        "code": "public class Solution {\n    int count = 0;\n    public int countArrangement(int N) {\n        boolean[] visited = new boolean[N + 1];\n        calculate(N, 1, visited);\n        return count;\n    }\n    public void calculate(int N, int pos, boolean[] visited) {\n        if (pos > N)\n            count++;\n        for (int i = 1; i <= N; i++) {\n            if (!visited[i] && (pos % i == 0 || i % pos == 0)) {\n                visited[i] = true;\n                calculate(N, pos + 1, visited);\n                visited[i] = false;\n            }\n        }\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Backtracking"
  ]
}