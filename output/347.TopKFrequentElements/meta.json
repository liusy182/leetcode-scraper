{
  "id": "347",
  "title": "Top K Frequent Elements",
  "slug": "top-k-frequent-elements",
  "difficulty": "Medium",
  "likes": 1812,
  "dislikes": 113,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Word Frequency\", \"titleSlug\": \"word-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Largest Element in an Array\", \"titleSlug\": \"kth-largest-element-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sort Characters By Frequency\", \"titleSlug\": \"sort-characters-by-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split Array into Consecutive Subsequences\", \"titleSlug\": \"split-array-into-consecutive-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Top K Frequent Words\", \"titleSlug\": \"top-k-frequent-words\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Closest Points to Origin\", \"titleSlug\": \"k-closest-points-to-origin\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "628",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "nMWGBTcf": [
      {
        "code": "class Solution {\n  public List<Integer> topKFrequent(int[] nums, int k) {\n    // build hash map : character and how often it appears\n    HashMap<Integer, Integer> count = new HashMap();\n    for (int n: nums) {\n      count.put(n, count.getOrDefault(n, 0) + 1);\n    }\n\n    // init heap 'the less frequent element first'\n    PriorityQueue<Integer> heap =\n            new PriorityQueue<Integer>((n1, n2) -> count.get(n1) - count.get(n2));\n\n    // keep k top frequent elements in the heap\n    for (int n: count.keySet()) {\n      heap.add(n);\n      if (heap.size() > k)\n        heap.poll();\n    }\n\n    // build output list\n    List<Integer> top_k = new LinkedList();\n    while (!heap.isEmpty())\n      top_k.add(heap.poll());\n    Collections.reverse(top_k);\n    return top_k;\n  }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\" \n        count = collections.Counter(nums)   \n        return heapq.nlargest(k, count.keys(), key=count.get) ",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Hash Table",
    "Heap"
  ]
}