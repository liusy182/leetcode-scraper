{
  "id": "923",
  "title": "3Sum With Multiplicity",
  "slug": "3sum-with-multiplicity",
  "difficulty": "Medium",
  "likes": 222,
  "dislikes": 44,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "587",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "TCrTgDfK": [
      {
        "code": "class Solution {\n    public int threeSumMulti(int[] A, int target) {\n        int MOD = 1_000_000_007;\n        long ans = 0;\n        Arrays.sort(A);\n\n        for (int i = 0; i < A.length; ++i) {\n            // We'll try to find the number of i < j < k\n            // with A[j] + A[k] == T, where T = target - A[i].\n\n            // The below is a \"two sum with multiplicity\".\n            int T = target - A[i];\n            int j = i+1, k = A.length - 1;\n\n            while (j < k) {\n                // These steps proceed as in a typical two-sum.\n                if (A[j] + A[k] < T)\n                    j++;\n                else if (A[j] + A[k] > T)\n                    k--;\n                else if (A[j] != A[k]) {  // We have A[j] + A[k] == T.\n                    // Let's count \"left\": the number of A[j] == A[j+1] == A[j+2] == ...\n                    // And similarly for \"right\".\n                    int left = 1, right = 1;\n                    while (j+1 < k && A[j] == A[j+1]) {\n                        left++;\n                        j++;\n                    }\n                    while (k-1 > j && A[k] == A[k-1]) {\n                        right++;\n                        k--;\n                    }\n\n                    ans += left * right;\n                    ans %= MOD;\n                    j++;\n                    k--;\n                } else {\n                    // M = k - j + 1\n                    // We contributed M * (M-1) / 2 pairs.\n                    ans += (k-j+1) * (k-j) / 2;\n                    ans %= MOD;\n                    break;\n                }\n            }\n        }\n\n        return (int) ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def threeSumMulti(self, A, target):\n        MOD = 10**9 + 7\n        ans = 0\n        A.sort()\n\n        for i, x in enumerate(A):\n            # We'll try to find the number of i < j < k\n            # with A[j] + A[k] == T, where T = target - A[i].\n\n            # The below is a \"two sum with multiplicity\".\n            T = target - A[i]\n            j, k = i+1, len(A) - 1\n\n            while j < k:\n                # These steps proceed as in a typical two-sum.\n                if A[j] + A[k] < T:\n                    j += 1\n                elif A[j] + A[k] > T:\n                    k -= 1\n                # These steps differ:\n                elif A[j] != A[k]: # We have A[j] + A[k] == T.\n                    # Let's count \"left\": the number of A[j] == A[j+1] == A[j+2] == ...\n                    # And similarly for \"right\".\n                    left = right = 1\n                    while j + 1 < k and A[j] == A[j+1]:\n                        left += 1\n                        j += 1\n                    while k - 1 > j and A[k] == A[k-1]:\n                        right += 1\n                        k -= 1\n\n                    # We contributed left * right many pairs.\n                    ans += left * right\n                    ans %= MOD\n                    j += 1\n                    k -= 1\n\n                else:\n                    # M = k - j + 1\n                    # We contributed M * (M-1) / 2 pairs.\n                    ans += (k-j+1) * (k-j) / 2\n                    ans %= MOD\n                    break\n\n        return ans",
        "langSlug": "python"
      }
    ],
    "9nU5mTcv": [
      {
        "code": "class Solution {\n    public int threeSumMulti(int[] A, int target) {\n        int MOD = 1_000_000_007;\n        long[] count = new long[101];\n        for (int x: A)\n            count[x]++;\n\n        long ans = 0;\n\n        // All different\n        for (int x = 0; x <= 100; ++x)\n            for (int y = x+1; y <= 100; ++y) {\n                int z = target - x - y;\n                if (y < z && z <= 100) {\n                    ans += count[x] * count[y] * count[z];\n                    ans %= MOD;\n                }\n            }\n\n        // x == y != z\n        for (int x = 0; x <= 100; ++x) {\n            int z = target - 2*x;\n            if (x < z && z <= 100) {\n                ans += count[x] * (count[x] - 1) / 2 * count[z];\n                ans %= MOD;\n            }\n        }\n\n        // x != y == z\n        for (int x = 0; x <= 100; ++x) {\n            if (target % 2 == x % 2) {\n                int y = (target - x) / 2;\n                if (x < y && y <= 100) {\n                    ans += count[x] * count[y] * (count[y] - 1) / 2;\n                    ans %= MOD;\n                }\n            }\n        }\n\n        // x == y == z\n        if (target % 3 == 0) {\n            int x = target / 3;\n            if (0 <= x && x <= 100) {\n                ans += count[x] * (count[x] - 1) * (count[x] - 2) / 6;\n                ans %= MOD;\n            }\n        }\n\n        return (int) ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def threeSumMulti(self, A, target):\n        MOD = 10**9 + 7\n        count = [0] * 101\n        for x in A:\n            count[x] += 1\n\n        ans = 0\n\n        # All different\n        for x in xrange(101):\n            for y in xrange(x+1, 101):\n                z = target - x - y\n                if y < z <= 100:\n                    ans += count[x] * count[y] * count[z]\n                    ans %= MOD\n\n        # x == y\n        for x in xrange(101):\n            z = target - 2*x\n            if x < z <= 100:\n                ans += count[x] * (count[x] - 1) / 2 * count[z]\n                ans %= MOD\n\n        # y == z\n        for x in xrange(101):\n            if (target - x) % 2 == 0:\n                y = (target - x) / 2\n                if x < y <= 100:\n                    ans += count[x] * count[y] * (count[y] - 1) / 2\n                    ans %= MOD\n\n        # x == y == z\n        if target % 3 == 0:\n            x = target / 3\n            if 0 <= x <= 100:\n                ans += count[x] * (count[x] - 1) * (count[x] - 2) / 6\n                ans %= MOD\n\n        return ans",
        "langSlug": "python"
      }
    ],
    "Ph3ok9qb": [
      {
        "code": "class Solution {\n    public int threeSumMulti(int[] A, int target) {\n        int MOD = 1_000_000_007;\n\n        // Initializing as long saves us the trouble of\n        // managing count[x] * count[y] * count[z] overflowing later.\n        long[] count = new long[101];\n        int uniq = 0;\n        for (int x: A) {\n            count[x]++;\n            if (count[x] == 1)\n                uniq++;\n        }\n\n        int[] keys = new int[uniq];\n        int t = 0;\n        for (int i = 0; i <= 100; ++i)\n            if (count[i] > 0)\n                keys[t++] = i;\n\n        long ans = 0;\n        // Now, let's do a 3sum on \"keys\", for i <= j <= k.\n        // We will use count to add the correct contribution to ans.\n\n        for (int i = 0; i < keys.length; ++i) {\n            int x = keys[i];\n            int T = target - x;\n            int j = i, k = keys.length - 1;\n            while (j <= k) {\n                int y = keys[j], z = keys[k];\n                if (y + z < T) {\n                    j++;\n                } else if (y + z > T) {\n                    k--;\n                } else {  // # x+y+z == T, now calc the size of the contribution\n                    if (i < j && j < k) {\n                        ans += count[x] * count[y] * count[z];\n                    } else if (i == j && j < k) {\n                        ans += count[x] * (count[x] - 1) / 2 * count[z];\n                    } else if (i < j && j == k) {\n                        ans += count[x] * count[y] * (count[y] - 1) / 2;\n                    } else {  // i == j == k\n                        ans += count[x] * (count[x] - 1) * (count[x] - 2) / 6;\n                    }\n\n                    ans %= MOD;\n                    j++;\n                    k--;\n                }\n            }\n        }\n\n        return (int) ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def threeSumMulti(self, A, target):\n        MOD = 10**9 + 7\n        count = collections.Counter(A)\n        keys = sorted(count)\n\n        ans = 0\n\n        # Now, let's do a 3sum on \"keys\", for i <= j <= k.\n        # We will use count to add the correct contribution to ans.\n        for i, x in enumerate(keys):\n            T = target - x\n            j, k = i, len(keys) - 1\n            while j <= k:\n                y, z = keys[j], keys[k]\n                if y + z < T:\n                    j += 1\n                elif y + z > T:\n                    k -= 1\n                else: # x+y+z == T, now calculate the size of the contribution\n                    if i < j < k:\n                        ans += count[x] * count[y] * count[z]\n                    elif i == j < k:\n                        ans += count[x] * (count[x] - 1) / 2 * count[z]\n                    elif i < j == k:\n                        ans += count[x] * count[y] * (count[y] - 1) / 2\n                    else:  # i == j == k\n                        ans += count[x] * (count[x] - 1) * (count[x] - 2) / 6\n\n                    j += 1\n                    k -= 1\n\n        return ans % MOD",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Two Pointers"
  ]
}