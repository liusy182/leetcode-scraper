{
  "id": "993",
  "title": "Cousins in Binary Tree",
  "slug": "cousins-in-binary-tree",
  "difficulty": "Easy",
  "likes": 269,
  "dislikes": 19,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "695",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "2M2DeUvF": [
      {
        "code": "class Solution {\n    Map<Integer, Integer> depth;\n    Map<Integer, TreeNode> parent;\n\n    public boolean isCousins(TreeNode root, int x, int y) {\n        depth = new HashMap();\n        parent = new HashMap();\n        dfs(root, null);\n        return (depth.get(x) == depth.get(y) && parent.get(x) != parent.get(y));\n    }\n\n    public void dfs(TreeNode node, TreeNode par) {\n        if (node != null) {\n            depth.put(node.val, par != null ? 1 + depth.get(par.val) : 0);\n            parent.put(node.val, par);\n            dfs(node.left, node);\n            dfs(node.right, node);\n        }\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def isCousins(self, root, x, y):\n        parent = {}\n        depth = {}\n        def dfs(node, par = None):\n            if node:\n                depth[node.val] = 1 + depth[par.val] if par else 0\n                parent[node.val] = par\n                dfs(node.left, node)\n                dfs(node.right, node)\n\n        dfs(root)\n        return depth[x] == depth[y] and parent[x] != parent[y]",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Tree",
    "Breadth-first Search"
  ],
  "images": {
    "cousins-in-binary-tree_1.png": "https://assets.leetcode.com/uploads/2019/02/12/q1248-01.png",
    "cousins-in-binary-tree_2.png": "https://assets.leetcode.com/uploads/2019/02/12/q1248-02.png",
    "cousins-in-binary-tree_3.png": "https://assets.leetcode.com/uploads/2019/02/13/q1248-03.png"
  }
}