{
  "id": "238",
  "title": "Product of Array Except Self",
  "slug": "product-of-array-except-self",
  "difficulty": "Medium",
  "likes": 2705,
  "dislikes": 234,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Trapping Rain Water\", \"titleSlug\": \"trapping-rain-water\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Product Subarray\", \"titleSlug\": \"maximum-product-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint House II\", \"titleSlug\": \"paint-house-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "solution": {
    "id": "727",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "S3Gu9CJk": [
      {
        "code": "class Solution {\n    public int[] productExceptSelf(int[] nums) {\n\n        // The length of the input array\n        int length = nums.length;\n\n        // The left and right arrays as described in the algorithm\n        int[] L = new int[length];\n        int[] R = new int[length];\n\n        // Final answer array to be returned\n        int[] answer = new int[length];\n\n        // L[i] contains the product of all the elements to the left\n        // Note: for the element at index '0', there are no elements to the left,\n        // so L[0] would be 1\n        L[0] = 1;\n        for (int i = 1; i < length; i++) {\n\n            // L[i - 1] already contains the product of elements to the left of 'i - 1'\n            // Simply multiplying it with nums[i - 1] would give the product of all\n            // elements to the left of index 'i'\n            L[i] = nums[i - 1] * L[i - 1];\n        }\n\n        // R[i] contains the product of all the elements to the right\n        // Note: for the element at index 'length - 1', there are no elements to the right,\n        // so the R[length - 1] would be 1\n        R[length - 1] = 1;\n        for (int i = length - 2; i >= 0; i--) {\n\n            // R[i + 1] already contains the product of elements to the right of 'i + 1'\n            // Simply multiplying it with nums[i + 1] would give the product of all\n            // elements to the right of index 'i'\n            R[i] = nums[i + 1] * R[i + 1];\n        }\n\n        // Constructing the answer array\n        for (int i = 0; i < length; i++) {\n            // For the first element, R[i] would be product except self\n            // For the last element of the array, product except self would be L[i]\n            // Else, multiple product of all elements to the left and to the right\n            answer[i] = L[i] * R[i];\n        }\n\n        return answer;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        \n        # The length of the input array \n        length = len(nums)\n        \n        # The left and right arrays as described in the algorithm\n        L, R, answer = [0]*length, [0]*length, [0]*length\n        \n        # L[i] contains the product of all the elements to the left\n        # Note: for the element at index '0', there are no elements to the left,\n        # so the L[0] would be 1\n        L[0] = 1\n        for i in range(1, length):\n            \n            # L[i - 1] already contains the product of elements to the left of 'i - 1'\n            # Simply multiplying it with nums[i - 1] would give the product of all \n            # elements to the left of index 'i'\n            L[i] = nums[i - 1] * L[i - 1]\n        \n        # R[i] contains the product of all the elements to the right\n        # Note: for the element at index 'length - 1', there are no elements to the right,\n        # so the R[length - 1] would be 1\n        R[length - 1] = 1\n        for i in reversed(range(length - 1)):\n            \n            # R[i + 1] already contains the product of elements to the right of 'i + 1'\n            # Simply multiplying it with nums[i + 1] would give the product of all \n            # elements to the right of index 'i'\n            R[i] = nums[i + 1] * R[i + 1]\n        \n        # Constructing the answer array\n        for i in range(length):\n            # For the first element, R[i] would be product except self\n            # For the last element of the array, product except self would be L[i]\n            # Else, multiple product of all elements to the left and to the right\n            answer[i] = L[i] * R[i]\n        \n        return answer",
        "langSlug": "python"
      }
    ],
    "o43uky8K": [
      {
        "code": "class Solution {\n    public int[] productExceptSelf(int[] nums) {\n\n        // The length of the input array \n        int length = nums.length;\n\n        // Final answer array to be returned\n        int[] answer = new int[length];\n\n        // answer[i] contains the product of all the elements to the left\n        // Note: for the element at index '0', there are no elements to the left,\n        // so the answer[0] would be 1\n        answer[0] = 1;\n        for (int i = 1; i < length; i++) {\n\n            // answer[i - 1] already contains the product of elements to the left of 'i - 1'\n            // Simply multiplying it with nums[i - 1] would give the product of all \n            // elements to the left of index 'i'\n            answer[i] = nums[i - 1] * answer[i - 1];\n        }\n\n        // R contains the product of all the elements to the right\n        // Note: for the element at index 'length - 1', there are no elements to the right,\n        // so the R would be 1\n        int R = 1;\n        for (int i = length - 1; i >= 0; i--) {\n\n            // For the index 'i', R would contain the \n            // product of all elements to the right. We update R accordingly\n            answer[i] = answer[i] * R;\n            R *= nums[i];\n        }\n\n        return answer;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        \n        # The length of the input array \n        length = len(nums)\n        \n        # The answer array to be returned\n        answer = [0]*length\n        \n        # answer[i] contains the product of all the elements to the left\n        # Note: for the element at index '0', there are no elements to the left,\n        # so the answer[0] would be 1\n        answer[0] = 1\n        for i in range(1, length):\n            \n            # answer[i - 1] already contains the product of elements to the left of 'i - 1'\n            # Simply multiplying it with nums[i - 1] would give the product of all \n            # elements to the left of index 'i'\n            answer[i] = nums[i - 1] * answer[i - 1]\n        \n        # R contains the product of all the elements to the right\n        # Note: for the element at index 'length - 1', there are no elements to the right,\n        # so the R would be 1\n        R = 1;\n        for i in reversed(range(length)):\n            \n            # For the index 'i', R would contain the \n            # product of all elements to the right. We update R accordingly\n            answer[i] = answer[i] * R\n            R *= nums[i]\n        \n        return answer",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Array"
  ]
}