{
  "id": "268",
  "title": "Missing Number",
  "slug": "missing-number",
  "difficulty": "Easy",
  "likes": 1083,
  "dislikes": 1477,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"First Missing Positive\", \"titleSlug\": \"first-missing-positive\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Duplicate Number\", \"titleSlug\": \"find-the-duplicate-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Couples Holding Hands\", \"titleSlug\": \"couples-holding-hands\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "solution": {
    "id": "288",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "BpPhWC2o": [
      {
        "code": "class Solution {\n    public int missingNumber(int[] nums) {\n        Arrays.sort(nums);\n\n        // Ensure that n is at the last index\n        if (nums[nums.length-1] != nums.length) {\n            return nums.length;\n        }\n        // Ensure that 0 is at the first index\n        else if (nums[0] != 0) {\n            return 0;\n        }\n\n        // If we get here, then the missing number is on the range (0, n)\n        for (int i = 1; i < nums.length; i++) {\n            int expectedNum = nums[i-1] + 1;\n            if (nums[i] != expectedNum) {\n                return expectedNum;\n            }\n        }\n\n        // Array was not missing any numbers\n        return -1;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def missingNumber(self, nums):\n        nums.sort()\n\n        # Ensure that n is at the last index\n        if nums[-1] != len(nums):\n            return len(nums)\n        # Ensure that 0 is at the first index\n        elif nums[0] != 0:\n            return 0\n\n        # If we get here, then the missing number is on the range (0, n)\n        for i in range(1, len(nums)):\n            expected_num = nums[i-1] + 1\n            if nums[i] != expected_num:\n                return expected_num",
        "langSlug": "python3"
      }
    ],
    "UBNtYrmj": [
      {
        "code": "class Solution {\n    public int missingNumber(int[] nums) {\n        Set<Integer> numSet = new HashSet<Integer>();\n        for (int num : nums) numSet.add(num);\n\n        int expectedNumCount = nums.length + 1;\n        for (int number = 0; number < expectedNumCount; number++) {\n            if (!numSet.contains(number)) {\n                return number;\n            }\n        }\n        return -1;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def missingNumber(self, nums):\n        num_set = set(nums)\n        n = len(nums) + 1\n        for number in range(n):\n            if number not in num_set:\n                return number",
        "langSlug": "python3"
      }
    ],
    "SFZgajWR": [
      {
        "code": "class Solution {\n    public int missingNumber(int[] nums) {\n        int missing = nums.length;\n        for (int i = 0; i < nums.length; i++) {\n            missing ^= i ^ nums[i];\n        }\n        return missing;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def missingNumber(self, nums):\n        missing = len(nums)\n        for i, num in enumerate(nums):\n            missing ^= i ^ num\n        return missing",
        "langSlug": "python3"
      }
    ],
    "3NM3eQvx": [
      {
        "code": "class Solution {\n    public int missingNumber(int[] nums) {\n        int expectedSum = nums.length*(nums.length + 1)/2;\n        int actualSum = 0;\n        for (int num : nums) actualSum += num;\n        return expectedSum - actualSum;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def missingNumber(self, nums):\n        expected_sum = len(nums)*(len(nums)+1)//2\n        actual_sum = sum(nums)\n        return expected_sum - actual_sum",
        "langSlug": "python3"
      }
    ]
  },
  "topicTags": [
    "Array",
    "Math",
    "Bit Manipulation"
  ]
}