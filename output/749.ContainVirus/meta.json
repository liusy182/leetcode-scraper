{
  "id": "749",
  "title": "Contain Virus",
  "slug": "contain-virus",
  "difficulty": "Hard",
  "likes": 51,
  "dislikes": 173,
  "hints": [
    "The implementation is long - we want to perfrom the following steps:\r\n\r\n* Find all viral regions (connected components), additionally for each region keeping track of the frontier (neighboring uncontaminated cells), and the perimeter of the region.\r\n\r\n* Disinfect the most viral region, adding it's perimeter to the answer.\r\n\r\n* Spread the virus in the remaining regions outward by 1 square."
  ],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "346",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "VFSzJzRe": [
      {
        "code": "class Solution {\n    Set<Integer> seen;\n    List<Set<Integer>> regions;\n    List<Set<Integer>> frontiers;\n    List<Integer> perimeters;\n    int[][] grid;\n    int R, C;\n    int[] dr = new int[]{-1, 1, 0, 0};\n    int[] dc = new int[]{0, 0, -1, 1};\n\n    public int containVirus(int[][] grid) {\n        this.grid = grid;\n        R = grid.length;\n        C = grid[0].length;\n\n        int ans = 0;\n        while (true) {\n            seen = new HashSet();\n            regions = new ArrayList();\n            frontiers = new ArrayList();\n            perimeters = new ArrayList();\n\n            for (int r = 0; r < R; ++r) {\n                for (int c = 0; c < C; ++c) {\n                    if (grid[r][c] == 1 && !seen.contains(r*C + c)) {\n                        regions.add(new HashSet());\n                        frontiers.add(new HashSet());\n                        perimeters.add(0);\n                        dfs(r, c);\n                    }\n                }\n            }\n\n            if (regions.isEmpty()) break;\n            int triageIndex = 0;\n            for (int i = 0; i < frontiers.size(); ++i) {\n                if (frontiers.get(triageIndex).size() < frontiers.get(i).size())\n                    triageIndex = i;\n            }\n            ans += perimeters.get(triageIndex);\n\n            for (int i = 0; i < regions.size(); ++i) {\n                if (i == triageIndex) {\n                    for (int code: regions.get(i))\n                        grid[code / C][code % C] = -1;\n                } else {\n                    for (int code: regions.get(i)) {\n                        int r = code / C, c = code % C;\n                        for (int k = 0; k < 4; ++k) {\n                            int nr = r + dr[k], nc = c + dc[k];\n                            if (nr >= 0 && nr < R && nc >= 0 && nc < C && grid[nr][nc] == 0)\n                                grid[nr][nc] = 1;\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n\n    public void dfs(int r, int c) {\n        if (!seen.contains(r*C + c)) {\n            seen.add(r*C + c);\n            int N = regions.size()\n            regions.get(N - 1).add(r*C + c);\n            for (int k = 0; k < 4; ++k) {\n                int nr = r + dr[k], nc = c + dc[k];\n                if (nr >= 0 && nr < R && nc >= 0 && nc < C) {\n                    if (grid[nr][nc] == 1) {\n                        dfs(nr, nc);\n                    } else if (grid[nr][nc] == 0){\n                        frontiers.get(N - 1).add(nr*C + nc);\n                        perimeters.set(N - 1, perimeters.get(N - 1) + 1);\n                    }\n                }\n            }\n        }\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def containVirus(self, grid):\n        R, C = len(grid), len(grid[0])\n        def neighbors(r, c):\n            for nr, nc in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):\n                if 0 <= nr < R and 0 <= nc < C:\n                    yield nr, nc\n\n        def dfs(r, c):\n            if (r, c) not in seen:\n                seen.add((r, c))\n                regions[-1].add((r, c))\n                for nr, nc in neighbors(r, c):\n                    if grid[nr][nc] == 1:\n                        dfs(nr, nc)\n                    elif grid[nr][nc] == 0:\n                        frontiers[-1].add((nr, nc))\n                        perimeters[-1] += 1\n\n        ans = 0\n        while True:\n            #Find all regions, with associated frontiers and perimeters.\n            seen = set()\n            regions = []\n            frontiers = []\n            perimeters = []\n            for r, row in enumerate(grid):\n                for c, val in enumerate(row):\n                    if val == 1 and (r, c) not in seen:\n                        regions.append(set())\n                        frontiers.append(set())\n                        perimeters.append(0)\n                        dfs(r, c)\n\n            #If there are no regions left, break.\n            if not regions: break\n\n            #Add the perimeter of the region which will infect the most squares.\n            triage_index = frontiers.index(max(frontiers, key = len))\n            ans += perimeters[triage_index]\n\n            #Triage the most infectious region, and spread the rest of the regions.\n            for i, reg in enumerate(regions):\n                if i == triage_index:\n                    for r, c in reg:\n                        grid[r][c] = -1\n                else:\n                    for r, c in reg:\n                        for nr, nc in neighbors(r, c):\n                            if grid[nr][nc] == 0:\n                                grid[nr][nc] = 1\n\n        return ans\n",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Depth-first Search"
  ]
}