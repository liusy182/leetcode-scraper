{
  "id": "282",
  "title": "Expression Add Operators",
  "slug": "expression-add-operators",
  "difficulty": "Hard",
  "likes": 796,
  "dislikes": 112,
  "hints": [
    "Note that a number can contain multiple digits.",
    "Since the question asks us to find <b>all</b> of the valid expressions, we need a way to iterate over all of them. (<b>Hint:</b> Recursion!)",
    "We can keep track of the expression string and evaluate it at the very end. But that would take a lot of time. Can we keep track of the expression's value as well so as to avoid the evaluation at the very end of recursion?",
    "Think carefully about the multiply operator. It has a higher precedence than the addition and subtraction operators. \r\n\r\n<br> 1 + 2 = 3  <br>\r\n1 + 2 - 4 --> 3 - 4 --> -1 <br>\r\n1 + 2 - 4 * 12 --> -1 * 12 --> -12 (WRONG!) <br>\r\n1 + 2 - 4 * 12 --> -1 - (-4) + (-4 * 12) --> 3 + (-48) --> -45 (CORRECT!)",
    "We simply need to keep track of the last operand in our expression and reverse it's effect on the expression's value while considering the multiply operator."
  ],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Evaluate Reverse Polish Notation\", \"titleSlug\": \"evaluate-reverse-polish-notation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator\", \"titleSlug\": \"basic-calculator\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator II\", \"titleSlug\": \"basic-calculator-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Different Ways to Add Parentheses\", \"titleSlug\": \"different-ways-to-add-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Target Sum\", \"titleSlug\": \"target-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "548",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "BFyUVxwz": [
      {
        "code": "class Solution {\n\n  public ArrayList<String> answer;\n  public String digits;\n  public long target;\n\n  public void recurse(\n      int index, long previousOperand, long currentOperand, long value, ArrayList<String> ops) {\n    String nums = this.digits;\n\n    // Done processing all the digits in num\n    if (index == nums.length()) {\n\n      // If the final value == target expected AND\n      // no operand is left unprocessed\n      if (value == this.target && currentOperand == 0) {\n        StringBuilder sb = new StringBuilder();\n        ops.subList(1, ops.size()).forEach(v -> sb.append(v));\n        this.answer.add(sb.toString());\n      }\n      return;\n    }\n\n    // Extending the current operand by one digit\n    currentOperand = currentOperand * 10 + Character.getNumericValue(nums.charAt(index));\n    String current_val_rep = Long.toString(currentOperand);\n    int length = nums.length();\n\n    // To avoid cases where we have 1 + 05 or 1 * 05 since 05 won't be a\n    // valid operand. Hence this check\n    if (currentOperand > 0) {\n\n      // NO OP recursion\n      recurse(index + 1, previousOperand, currentOperand, value, ops);\n    }\n\n    // ADDITION\n    ops.add(\"+\");\n    ops.add(current_val_rep);\n    recurse(index + 1, currentOperand, 0, value + currentOperand, ops);\n    ops.remove(ops.size() - 1);\n    ops.remove(ops.size() - 1);\n\n    if (ops.size() > 0) {\n\n      // SUBTRACTION\n      ops.add(\"-\");\n      ops.add(current_val_rep);\n      recurse(index + 1, -currentOperand, 0, value - currentOperand, ops);\n      ops.remove(ops.size() - 1);\n      ops.remove(ops.size() - 1);\n\n      // MULTIPLICATION\n      ops.add(\"*\");\n      ops.add(current_val_rep);\n      recurse(\n          index + 1,\n          currentOperand * previousOperand,\n          0,\n          value - previousOperand + (currentOperand * previousOperand),\n          ops);\n      ops.remove(ops.size() - 1);\n      ops.remove(ops.size() - 1);\n    }\n  }\n\n  public List<String> addOperators(String num, int target) {\n\n    if (num.length() == 0) {\n      return new ArrayList<String>();\n    }\n\n    this.target = target;\n    this.digits = num;\n    this.answer = new ArrayList<String>();\n    this.recurse(0, 0, 0, 0, new ArrayList<String>());\n    return this.answer;\n  }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def addOperators(self, num: 'str', target: 'int') -> 'List[str]':\n\n        N = len(num)\n        answers = []\n        def recurse(index, prev_operand, current_operand, value, string):\n\n            # Done processing all the digits in num\n            if index == N:\n\n                # If the final value == target expected AND\n                # no operand is left unprocessed\n                if value == target and current_operand == 0:\n                    answers.append(\"\".join(string[1:]))\n                return\n\n            # Extending the current operand by one digit\n            current_operand = current_operand*10 + int(num[index])\n            str_op = str(current_operand)\n\n            # To avoid cases where we have 1 + 05 or 1 * 05 since 05 won't be a\n            # valid operand. Hence this check\n            if current_operand > 0:\n\n                # NO OP recursion\n                recurse(index + 1, prev_operand, current_operand, value, string)\n\n            # ADDITION\n            string.append('+'); string.append(str_op)\n            recurse(index + 1, current_operand, 0, value + current_operand, string)\n            string.pop();string.pop()\n\n            # Can subtract or multiply only if there are some previous operands\n            if string:\n\n                # SUBTRACTION\n                string.append('-'); string.append(str_op)\n                recurse(index + 1, -current_operand, 0, value - current_operand, string)\n                string.pop();string.pop()\n\n                # MULTIPLICATION\n                string.append('*'); string.append(str_op)\n                recurse(index + 1, current_operand * prev_operand, 0, value - prev_operand + (current_operand * prev_operand), string)\n                string.pop();string.pop()\n        recurse(0, 0, 0, 0, [])    \n        return answers",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Divide and Conquer"
  ]
}