{
  "id": "866",
  "title": "Prime Palindrome",
  "slug": "prime-palindrome",
  "difficulty": "Medium",
  "likes": 95,
  "dislikes": 274,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "504",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "UgnkELMD": [
      {
        "code": "class Solution {\n    public int primePalindrome(int N) {\n        for (int L = 1; L <= 5; ++L) {\n            //Check for odd-length palindromes\n            for (int root = (int)Math.pow(10, L - 1); root < (int)Math.pow(10, L); ++root) {\n                StringBuilder sb = new StringBuilder(Integer.toString(root));\n                for (int k = L-2; k >= 0; --k)\n                    sb.append(sb.charAt(k));\n                int x = Integer.valueOf(sb.toString());\n                if (x >= N && isPrime(x))\n                    return x;\n                    //If we didn't check for even-length palindromes:\n                    //return N <= 11 ? min(x, 11) : x\n            }\n\n            //Check for even-length palindromes\n            for (int root = (int)Math.pow(10, L - 1); root < (int)Math.pow(10, L); ++root) {\n                StringBuilder sb = new StringBuilder(Integer.toString(root));\n                for (int k = L-1; k >= 0; --k)\n                    sb.append(sb.charAt(k));\n                int x = Integer.valueOf(sb.toString());\n                if (x >= N && isPrime(x))\n                    return x;\n            }\n        }\n\n        throw null;\n    }\n\n    public boolean isPrime(int N) {\n        if (N < 2) return false;\n        int R = (int) Math.sqrt(N);\n        for (int d = 2; d <= R; ++d)\n            if (N % d == 0) return false;\n        return true;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def primePalindrome(self, N):\n        def is_prime(n):\n            return n > 1 and all(n%d for d in xrange(2, int(n**.5) + 1))\n\n        for length in xrange(1, 6):\n            #Check for odd-length palindromes\n            for root in xrange(10**(length - 1), 10**length):\n                s = str(root)\n                x = int(s + s[-2::-1]) #eg. s = '123' to x = int('12321')\n                if x >= N and is_prime(x):\n                    return x\n                    #If we didn't check for even-length palindromes:\n                    #return min(x, 11) if N <= 11 else x\n\n            #Check for even-length palindromes\n            for root in xrange(10**(length - 1), 10**length):\n                s = str(root)\n                x = int(s + s[-1::-1]) #eg. s = '123' to x = int('123321')\n                if x >= N and is_prime(x):\n                    return x",
        "langSlug": "python"
      }
    ],
    "NSw4owuf": [
      {
        "code": "class Solution {\n    public int primePalindrome(int N) {\n        while (true) {\n            if (N == reverse(N) && isPrime(N))\n                return N;\n            N++;\n            if (10_000_000 < N && N < 100_000_000)\n                N = 100_000_000;\n        }\n    }\n\n    public boolean isPrime(int N) {\n        if (N < 2) return false;\n        int R = (int) Math.sqrt(N);\n        for (int d = 2; d <= R; ++d)\n            if (N % d == 0) return false;\n        return true;\n    }\n\n    public int reverse(int N) {\n        int ans = 0;\n        while (N > 0) {\n            ans = 10 * ans + (N % 10);\n            N /= 10;\n        }\n        return ans;\n    }\n}\n",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def primePalindrome(self, N):\n        def is_prime(n):\n            return n > 1 and all(n % d for d in xrange(2, int(n**.5) + 1))\n\n        def reverse(x):\n            ans = 0\n            while x:\n                ans = 10 * ans + x % 10\n                x /= 10\n            return ans\n\n        while True:\n            if N == reverse(N) and is_prime(N):\n                return N\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Math"
  ]
}