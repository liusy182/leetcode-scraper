{
  "id": "869",
  "title": "Reordered Power of 2",
  "slug": "reordered-power-of-2",
  "difficulty": "Medium",
  "likes": 145,
  "dislikes": 67,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "508",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "jfG2dxr5": [
      {
        "code": "class Solution {\n    public boolean reorderedPowerOf2(int N) {\n        // Build eg. N = 128 -> A = [1, 2, 8]\n        String S = Integer.toString(N);\n        int[] A = new int[S.length()];\n        for (int i = 0; i < S.length(); ++i)\n            A[i] = S.charAt(i) - '0';\n        return permutations(A, 0);\n    }\n\n    // Return true if A represents a valid power of 2\n    public boolean isPowerOfTwo(int[] A) {\n        if (A[0] == 0) return false;  // no leading zero\n\n        // Build eg. A = [1, 2, 8] -> N = 128\n        int N = 0;\n        for (int x: A)\n            N = 10 * N + x;\n\n        // Remove the largest power of 2\n        while (N > 0 && ((N & 1) == 0))\n            N >>= 1;\n\n        // Check that there are no other factors besides 2\n        return N == 1;\n    }\n\n    /**\n     * Returns true if some permutation of (A[start], A[start+1], ...)\n     * can result in A representing a power of 2.\n     */\n    public boolean permutations(int[] A, int start) {\n        if (start == A.length)\n            return isPowerOfTwo(A);\n\n        // Choose some index i from [start, A.length - 1]\n        // to be placed into position A[start].\n        for (int i = start; i < A.length; ++i) {\n            // Place A[start] with value A[i].\n            swap(A, start, i);\n\n            // For each such placement of A[start], if a permutation\n            // of (A[start+1], A[start+2], ...) can result in A\n            // representing a power of 2, return true.\n            if (permutations(A, start + 1))\n                return true;\n\n            // Restore the array to the state it was in before\n            // A[start] was placed with value A[i].\n            swap(A, start, i);\n        }\n\n        return false;\n    }\n\n    public void swap(int[] A, int i, int j) {\n        int t = A[i];\n        A[i] = A[j];\n        A[j] = t;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def reorderedPowerOf2(self, N):\n        \"\"\"\n        Let's work through an example like N = 128.\n        In the last line, 'for cand in itertools.permutations(str(N))' will\n        iterate through the six possibilities cand = ('1', '2', '8'),\n        cand = ('1', '8', '2'), cand = ('2', '1', '8'), and so on.\n\n        The check cand[0] != '0' is a check that the candidate permutation\n        does not have a leading zero.\n\n        The check bin(int(\"\".join(cand))).count('1') == 1 is a check that cand\n        represents a power of 2: namely, that the number of ones in its binary\n        representation is 1.\n        \"\"\"\n        return any(cand[0] != '0' and bin(int(\"\".join(cand))).count('1') == 1\n                   for cand in itertools.permutations(str(N)))",
        "langSlug": "python"
      }
    ],
    "ZV2nPKdj": [
      {
        "code": "class Solution {\n    public boolean reorderedPowerOf2(int N) {\n        int[] A = count(N);\n        for (int i = 0; i < 31; ++i)\n            if (Arrays.equals(A, count(1 << i)))\n                return true;\n        return false;\n    }\n\n    // Returns the count of digits of N\n    // Eg. N = 112223334, returns [0,2,3,3,1,0,0,0,0,0]\n    public int[] count(int N) {\n        int[] ans = new int[10];\n        while (N > 0) {\n            ans[N % 10]++;\n            N /= 10;\n        }\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def reorderedPowerOf2(self, N):\n        count = collections.Counter(str(N))\n        return any(count == collections.Counter(str(1 << b))\n                   for b in xrange(31))",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Math"
  ]
}