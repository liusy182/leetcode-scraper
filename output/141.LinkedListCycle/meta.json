{
  "id": "141",
  "title": "Linked List Cycle",
  "slug": "linked-list-cycle",
  "difficulty": "Easy",
  "likes": 1775,
  "dislikes": 224,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Linked List Cycle II\", \"titleSlug\": \"linked-list-cycle-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Happy Number\", \"titleSlug\": \"happy-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "solution": {
    "id": "21",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "3tqYc6gz": [
      {
        "code": "public boolean hasCycle(ListNode head) {\n    Set<ListNode> nodesSeen = new HashSet<>();\n    while (head != null) {\n        if (nodesSeen.contains(head)) {\n            return true;\n        } else {\n            nodesSeen.add(head);\n        }\n        head = head.next;\n    }\n    return false;\n}",
        "langSlug": "java"
      }
    ],
    "B6ffJ2Xk": [
      {
        "code": "public boolean hasCycle(ListNode head) {\n    if (head == null || head.next == null) {\n        return false;\n    }\n    ListNode slow = head;\n    ListNode fast = head.next;\n    while (slow != fast) {\n        if (fast == null || fast.next == null) {\n            return false;\n        }\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    return true;\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Linked List",
    "Two Pointers"
  ],
  "images": {
    "linked-list-cycle_1.png": "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png",
    "linked-list-cycle_2.png": "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png",
    "linked-list-cycle_3.png": "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png"
  }
}