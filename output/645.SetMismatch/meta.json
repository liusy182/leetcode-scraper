{
  "id": "645",
  "title": "Set Mismatch",
  "slug": "set-mismatch",
  "difficulty": "Easy",
  "likes": 457,
  "dislikes": 251,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Find the Duplicate Number\", \"titleSlug\": \"find-the-duplicate-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "solution": {
    "id": "224",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "ugiTepy3": [
      {
        "code": "public class Solution {\n    public int[] findErrorNums(int[] nums) {\n        int dup = -1, missing = -1;\n        for (int i = 1; i <= nums.length; i++) {\n            int count = 0;\n            for (int j = 0; j < nums.length; j++) {\n                if (nums[j] == i)\n                    count++;\n            }\n            if (count == 2)\n                dup = i;\n            else if (count == 0)\n                missing = i;\n        }\n        return new int[] {dup, missing};\n    }\n}",
        "langSlug": "java"
      }
    ],
    "PcMPwwzf": [
      {
        "code": "public class Solution {\n    public int[] findErrorNums(int[] nums) {\n        int dup = -1, missing = -1;;\n        for (int i = 1; i <= nums.length; i++) {\n            int count = 0;\n            for (int j = 0; j < nums.length; j++) {\n                if (nums[j] == i)\n                    count++;\n            }\n            if (count == 2)\n                dup = i;\n            else if (count == 0)\n                missing = i;\n            if (dup > 0 && missing > 0)\n                break;\n        }\n        return new int[] {dup, missing};\n    }\n}",
        "langSlug": "java"
      }
    ],
    "Dj9BhAnK": [
      {
        "code": "public class Solution {\n    public int[] findErrorNums(int[] nums) {\n        Arrays.sort(nums);\n        int dup = -1, missing = 1;\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] == nums[i - 1])\n                dup = nums[i];\n            else if (nums[i] > nums[i - 1] + 1)\n                missing = nums[i - 1] + 1;\n        }\n        return new int[] {dup, nums[nums.length - 1] != nums.length ? nums.length : missing};\n    }\n}",
        "langSlug": "java"
      }
    ],
    "kz9G9DPq": [
      {
        "code": "public class Solution {\n    public int[] findErrorNums(int[] nums) {\n        Map < Integer, Integer > map = new HashMap();\n        int dup = -1, missing = 1;\n        for (int n: nums) {\n            map.put(n, map.getOrDefault(n, 0) + 1);\n        }\n        for (int i = 1; i <= nums.length; i++) {\n            if (map.containsKey(i)) {\n                if (map.get(i) == 2)\n                    dup = i;\n            } else\n                missing = i;\n        }\n        return new int[]{dup, missing};\n    }\n}",
        "langSlug": "java"
      }
    ],
    "QJRi2ZuU": [
      {
        "code": "public class Solution {\n    public int[] findErrorNums(int[] nums) {\n        int[] arr = new int[nums.length + 1];\n        int dup = -1, missing = 1;\n        for (int i = 0; i < nums.length; i++) {\n            arr[nums[i]] += 1;\n        }\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] == 0)\n                missing = i;\n            else if (arr[i] == 2)\n                dup = i;\n        }\n        return new int[]{dup, missing};\n    }\n}",
        "langSlug": "java"
      }
    ],
    "RJUw9UMo": [
      {
        "code": "public class Solution {\n    public int[] findErrorNums(int[] nums) {\n        int dup = -1, missing = 1;\n        for (int n: nums) {\n            if (nums[Math.abs(n) - 1] < 0)\n                dup = Math.abs(n);\n            else\n                nums[Math.abs(n) - 1] *= -1;\n        }\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] > 0)\n                missing = i + 1;\n        }\n        return new int[]{dup, missing};\n    }\n}",
        "langSlug": "java"
      }
    ],
    "USgeoHAo": [
      {
        "code": "public class Solution {\n    public int[] findErrorNums(int[] nums) {\n        int xor = 0, xor0 = 0, xor1 = 0;\n        for (int n: nums)\n            xor ^= n;\n        for (int i = 1; i <= nums.length; i++)\n            xor ^= i;\n        int rightmostbit = xor & ~(xor - 1);\n        for (int n: nums) {\n            if ((n & rightmostbit) != 0)\n                xor1 ^= n;\n            else\n                xor0 ^= n;\n        }\n        for (int i = 1; i <= nums.length; i++) {\n            if ((i & rightmostbit) != 0)\n                xor1 ^= i;\n            else\n                xor0 ^= i;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == xor0)\n                return new int[]{xor0, xor1};\n        }\n        return new int[]{xor1, xor0};\n    }\n}",
        "langSlug": "java"
      }
    ]
  },
  "topicTags": [
    "Hash Table",
    "Math"
  ]
}