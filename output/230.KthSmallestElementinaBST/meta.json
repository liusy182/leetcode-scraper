{
  "id": "230",
  "title": "Kth Smallest Element in a BST",
  "slug": "kth-smallest-element-in-a-bst",
  "difficulty": "Medium",
  "likes": 1356,
  "dislikes": 43,
  "hints": [
    "Try to utilize the property of a BST.",
    "Try in-order traversal. (Credits to @chan13)",
    "What if you could modify the BST node's structure?",
    "The optimal runtime complexity is O(height of BST)."
  ],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Second Minimum Node In a Binary Tree\", \"titleSlug\": \"second-minimum-node-in-a-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "solution": {
    "id": "723",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "8B2Y2ArK": [
      {
        "code": "class Solution {\n  public ArrayList<Integer> inorder(TreeNode root, ArrayList<Integer> arr) {\n    if (root == null) return arr;\n    inorder(root.left, arr);\n    arr.add(root.val);\n    inorder(root.right, arr);\n    return arr;\n  }\n\n  public int kthSmallest(TreeNode root, int k) {\n    ArrayList<Integer> nums = inorder(root, new ArrayList<Integer>());\n    return nums.get(k - 1);\n  }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def kthSmallest(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        def inorder(r):\n            return inorder(r.left) + [r.val] + inorder(r.right) if r else []\n    \n        return inorder(root)[k - 1]",
        "langSlug": "python"
      }
    ],
    "Z2JBGMv5": [
      {
        "code": "class Solution {\n  public int kthSmallest(TreeNode root, int k) {\n    LinkedList<TreeNode> stack = new LinkedList<TreeNode>();\n\n    while (true) {\n      while (root != null) {\n        stack.add(root);\n        root = root.left;\n      }\n      root = stack.removeLast();\n      if (--k == 0) return root.val;\n      root = root.right;\n    }\n  }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution:\n    def kthSmallest(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        stack = []\n        \n        while True:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            k -= 1\n            if not k:\n                return root.val\n            root = root.right",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Binary Search",
    "Tree"
  ]
}