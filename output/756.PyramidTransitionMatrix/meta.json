{
  "id": "756",
  "title": "Pyramid Transition Matrix",
  "slug": "pyramid-transition-matrix",
  "difficulty": "Medium",
  "likes": 202,
  "dislikes": 280,
  "hints": [],
  "isPaidOnly": false,
  "similarQuestions": "[]",
  "solution": {
    "id": "363",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "FoBNczLu": [
      {
        "code": "class Solution {\n    public boolean pyramidTransition(String bottom, List<String> allowed) {\n        int[][] T = new int[1 << 7][1 << 7];\n        for (String triple: allowed) {\n            int u = 1 << (triple.charAt(0) - 'A');\n            int v = 1 << (triple.charAt(1) - 'A');\n            int w = 1 << (triple.charAt(2) - 'A');\n            for (int b1 = 0; b1 < (1 << 7); ++b1) if ((u & b1) > 0)\n                for (int b2 = 0; b2 < (1 << 7); ++b2) if ((v & b2) > 0)\n                    T[b1][b2] |= w;\n        }\n\n        int[] state = new int[bottom.length()];\n        int t = 0;\n        for (char c: bottom.toCharArray())\n            state[t++] = 1 << (c - 'A');\n        while (t-- > 1)\n            for (int i = 0; i < t; ++i)\n                state[i] = T[state[i]][state[i+1]];\n        return state[0] > 0;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def pyramidTransition(self, bottom, allowed):\n        T = [[0] * (1 << 7) for _ in xrange(1 << 7)]\n        for triple in allowed:\n            u, v, w = (1 << (ord(x) - ord('A')) for x in triple)\n            for b1 in xrange(1 << 7):\n                if u & b1:\n                    for b2 in xrange(1 << 7):\n                        if v & b2:\n                            T[b1][b2] |= w\n\n        state = [1 << (ord(x) - ord('A')) for x in bottom]\n        while len(state) > 1:\n            for i in xrange(len(state) - 1):\n                state[i] = T[state[i]][state[i+1]]\n            state.pop()\n        return bool(state[0])",
        "langSlug": "python"
      }
    ],
    "W723Lgci": [
      {
        "code": "class Solution {\n    int[][] T;\n    Set<Long> seen;\n\n    public boolean pyramidTransition(String bottom, List<String> allowed) {\n        T = new int[7][7];\n        for (String a: allowed)\n            T[a.charAt(0) - 'A'][a.charAt(1) - 'A'] |= 1 << (a.charAt(2) - 'A');\n\n        seen = new HashSet();\n        int N = bottom.length();\n        int[][] A = new int[N][N];\n        int t = 0;\n        for (char c: bottom.toCharArray())\n            A[N-1][t++] = c - 'A';\n        return solve(A, 0, N-1, 0);\n    }\n\n    //A[i] - the ith row of the pyramid\n    //R - integer representing the current row of the pyramid\n    //N - length of current row we are calculating\n    //i - index of how far in the current row we are calculating\n    //Returns true iff pyramid can be built\n    public boolean solve(int[][] A, long R, int N, int i) {\n        if (N == 1 && i == 1) { // If successfully placed entire pyramid\n            return true;\n        } else if (i == N) {\n            if (seen.contains(R)) return false; // If we've already tried this row, give up\n            seen.add(R); // Add row to cache\n            return solve(A, 0, N-1, 0); // Calculate next row\n        } else {\n            // w's jth bit is true iff block #j could be\n            // a parent of A[N][i] and A[N][i+1]\n            int w = T[A[N][i]][A[N][i+1]];\n            // for each set bit in w...\n            for (int b = 0; b < 7; ++b) if (((w >> b) & 1) != 0) {\n                A[N-1][i] = b; //set parent to be equal to block #b\n                //If rest of pyramid can be built, return true\n                //R represents current row, now with ith bit set to b+1\n                // in base 8.\n                if (solve(A, R * 8 + (b+1), N, i+1)) return true;\n            }\n            return false;\n        }\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def pyramidTransition(self, bottom, allowed):\n        T = collections.defaultdict(set)\n        for u, v, w in allowed:\n            T[u, v].add(w)\n\n        #Comments can be used to cache intermediate results\n        #seen = set()\n        def solve(A):\n            if len(A) == 1: return True\n            #if A in seen: return False\n            #seen.add(A)\n            return any(solve(cand) for cand in build(A, []))\n\n        def build(A, ans, i = 0):\n            if i + 1 == len(A):\n                yield \"\".join(ans)\n            else:\n                for w in T[A[i], A[i+1]]:\n                    ans.append(w)\n                    for result in build(A, ans, i+1):\n                        yield result\n                    ans.pop()\n\n        return solve(bottom)",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Bit Manipulation",
    "Depth-first Search"
  ]
}