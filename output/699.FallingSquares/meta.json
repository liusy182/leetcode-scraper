{
  "id": "699",
  "title": "Falling Squares",
  "slug": "falling-squares",
  "difficulty": "Hard",
  "likes": 182,
  "dislikes": 35,
  "hints": [
    "If positions = [[10, 20], [20, 30]], this is the same as [[1, 2], [2, 3]].  Currently, the values of positions are very large.  Can you generalize this approach so as to make the values in positions manageable?"
  ],
  "isPaidOnly": false,
  "similarQuestions": "[{\"title\": \"The Skyline Problem\", \"titleSlug\": \"the-skyline-problem\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "solution": {
    "id": "264",
    "canSeeDetail": true,
    "__typename": "ArticleNode",
    "fMedPoC3": [
      {
        "code": "Set<Integer> coords = new HashSet();\nfor (int[] pos: positions) {\n    coords.add(pos[0]);\n    coords.add(pos[0] + pos[1] - 1);\n}\nList<Integer> sortedCoords = new ArrayList(coords);\nCollections.sort(sortedCoords);\n\nMap<Integer, Integer> index = new HashMap();\nint t = 0;\nfor (int coord: sortedCoords) index.put(coord, t++);",
        "langSlug": "java"
      },
      {
        "code": "coords = set()\nfor left, size in positions:\n    coords.add(left)\n    coords.add(left + size - 1)\nindex = {x: i for i, x in enumerate(sorted(coords))}",
        "langSlug": "python"
      }
    ],
    "Pb4sS8fW": [
      {
        "code": "class Solution {\n    public List<Integer> fallingSquares(int[][] positions) {\n        int[] qans = new int[positions.length];\n        for (int i = 0; i < positions.length; i++) {\n            int left = positions[i][0];\n            int size = positions[i][1];\n            int right = left + size;\n            qans[i] += size;\n\n            for (int j = i+1; j < positions.length; j++) {\n                int left2 = positions[j][0];\n                int size2 = positions[j][1];\n                int right2 = left2 + size2;\n                if (left2 < right && left < right2) { //intersect\n                    qans[j] = Math.max(qans[j], qans[i]);\n                }\n            }\n        }\n\n        List<Integer> ans = new ArrayList();\n        int cur = -1;\n        for (int x: qans) {\n            cur = Math.max(cur, x);\n            ans.add(cur);\n        }\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def fallingSquares(self, positions):\n        qans = [0] * len(positions)\n        for i, (left, size) in enumerate(positions):\n            right = left + size\n            qans[i] += size\n            for j in xrange(i+1, len(positions)):\n                left2, size2 = positions[j]\n                right2 = left2 + size2\n                if left2 < right and left < right2: #intersect\n                    qans[j] = max(qans[j], qans[i])\n\n        ans = []\n        for x in qans:\n            ans.append(max(ans[-1], x) if ans else x)\n        return ans",
        "langSlug": "python"
      }
    ],
    "h2KhkM7T": [
      {
        "code": "class Solution {\n    int[] heights;\n\n    public int query(int L, int R) {\n        int ans = 0;\n        for (int i = L; i <= R; i++) {\n            ans = Math.max(ans, heights[i]);\n        }\n        return ans;\n    }\n\n    public void update(int L, int R, int h) {\n        for (int i = L; i <= R; i++) {\n            heights[i] = Math.max(heights[i], h);\n        }\n    }\n\n    public List<Integer> fallingSquares(int[][] positions) {\n        //Coordinate Compression\n        //HashMap<Integer, Integer> index = ...;\n        //int t = ...;\n\n        heights = new int[t];\n        int best = 0;\n        List<Integer> ans = new ArrayList();\n\n        for (int[] pos: positions) {\n            int L = index.get(pos[0]);\n            int R = index.get(pos[0] + pos[1] - 1);\n            int h = query(L, R) + pos[1];\n            update(L, R, h);\n            best = Math.max(best, h);\n            ans.add(best);\n        }\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def fallingSquares(self, positions):\n        #Coordinate Compression\n        #index = ...\n\n        heights = [0] * len(index)\n        def query(L, R):\n            return max(heights[i] for i in xrange(L, R+1))\n\n        def update(L, R, h):\n            for i in xrange(L, R+1):\n                heights[i] = max(heights[i], h)\n\n        best = 0\n        ans = []\n        for left, size in positions:\n            L = index[left]\n            R = index[left + size - 1]\n            h = query(L, R) + size\n            update(L, R, h)\n            best = max(best, h)\n            ans.append(best)\n\n        return ans",
        "langSlug": "python"
      }
    ],
    "ZY8qrszn": [
      {
        "code": "class Solution {\n    int[] heights;\n    int[] blocks;\n    int[] blocks_read;\n    int B;\n\n    public int query(int left, int right) {\n        int ans = 0;\n        while (left % B > 0 && left <= right) {\n            ans = Math.max(ans, heights[left]);\n            ans = Math.max(ans, blocks[left / B]);\n            left++;\n        }\n        while (right % B != B - 1 && left <= right) {\n            ans = Math.max(ans, heights[right]);\n            ans = Math.max(ans, blocks[right / B]);\n            right--;\n        }\n        while (left <= right) {\n            ans = Math.max(ans, blocks[left / B]);\n            ans = Math.max(ans, blocks_read[left / B]);\n            left += B;\n        }\n        return ans;\n    }\n\n    public void update(int left, int right, int h) {\n        while (left % B > 0 && left <= right) {\n            heights[left] = Math.max(heights[left], h);\n            blocks_read[left / B] = Math.max(blocks_read[left / B], h);\n            left++;\n        }\n        while (right % B != B - 1 && left <= right) {\n            heights[right] = Math.max(heights[right], h);\n            blocks_read[right / B] = Math.max(blocks_read[right / B], h);\n            right--;\n        }\n        while (left <= right) {\n            blocks[left / B] = Math.max(blocks[left / B], h);\n            left += B;\n        }\n    }\n\n    public List<Integer> fallingSquares(int[][] positions) {\n        //Coordinate Compression\n        //HashMap<Integer, Integer> index = ...;\n        //int t = ...;\n\n        heights = new int[t];\n        B = (int) Math.sqrt(t);\n        blocks = new int[B+2];\n        blocks_read = new int[B+2];\n\n        int best = 0;\n        List<Integer> ans = new ArrayList();\n\n        for (int[] pos: positions) {\n            int L = index.get(pos[0]);\n            int R = index.get(pos[0] + pos[1] - 1);\n            int h = query(L, R) + pos[1];\n            update(L, R, h);\n            best = Math.max(best, h);\n            ans.add(best);\n        }\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class Solution(object):\n    def fallingSquares(self, positions):\n        #Coordinate compression\n        #index = ...\n\n        W = len(index)\n        B = int(W**.5)\n        heights = [0] * W\n        blocks = [0] * (B+2)\n        blocks_read = [0] * (B+2)\n\n        def query(left, right):\n            ans = 0\n            while left % B and left <= right:\n                ans = max(ans, heights[left], blocks[left / B])\n                left += 1\n            while right % B != B-1 and left <= right:\n                ans = max(ans, heights[right], blocks[right / B])\n                right -= 1\n            while left <= right:\n                ans = max(ans, blocks[left / B], blocks_read[left / B])\n                left += B\n            return ans\n\n        def update(left, right, h):\n            while left % B and left <= right:\n                heights[left] = max(heights[left], h)\n                blocks_read[left / B] = max(blocks_read[left / B], h)\n                left += 1\n            while right % B != B-1 and left <= right:\n                heights[right] = max(heights[right], h)\n                blocks_read[right / B] = max(blocks_read[right / B], h)\n                right -= 1\n            while left <= right:\n                blocks[left / B] = max(blocks[left / B], h)\n                left += B\n\n        best = 0\n        ans = []\n        for left, size in positions:\n            L = index[left]\n            R = index[left + size - 1]\n            h = query(L, R) + size\n            update(L, R, h)\n            best = max(best, h)\n            ans.append(best)\n\n        return ans",
        "langSlug": "python"
      }
    ],
    "SHMdZn9d": [
      {
        "code": "class Solution {\n    public List<Integer> fallingSquares(int[][] positions) {\n        //Coordinate Compression\n        //HashMap<Integer, Integer> index = ...;\n\n        SegmentTree tree = new SegmentTree(sortedCoords.size());\n        int best = 0;\n        List<Integer> ans = new ArrayList();\n\n        for (int[] pos: positions) {\n            int L = index.get(pos[0]);\n            int R = index.get(pos[0] + pos[1] - 1);\n            int h = tree.query(L, R) + pos[1];\n            tree.update(L, R, h);\n            best = Math.max(best, h);\n            ans.add(best);\n        }\n        return ans;\n    }\n}\n\nclass SegmentTree {\n    int N, H;\n    int[] tree, lazy;\n\n    SegmentTree(int N) {\n        this.N = N;\n        H = 1;\n        while ((1 << H) < N) H++;\n        tree = new int[2 * N];\n        lazy = new int[N];\n    }\n\n    private void apply(int x, int val) {\n        tree[x] = Math.max(tree[x], val);\n        if (x < N) lazy[x] = Math.max(lazy[x], val);\n    }\n\n    private void pull(int x) {\n        while (x > 1) {\n            x >>= 1;\n            tree[x] = Math.max(tree[x * 2], tree[x * 2 + 1]);\n            tree[x] = Math.max(tree[x], lazy[x]);\n        }\n    }\n\n    private void push(int x) {\n        for (int h = H; h > 0; h--) {\n            int y = x >> h;\n            if (lazy[y] > 0) {\n                apply(y * 2, lazy[y]);\n                apply(y * 2 + 1, lazy[y]);\n                lazy[y] = 0;\n            }\n        }\n    }\n\n    public void update(int L, int R, int h) {\n        L += N; R += N;\n        int L0 = L, R0 = R, ans = 0;\n        while (L <= R) {\n            if ((L & 1) == 1) apply(L++, h);\n            if ((R & 1) == 0) apply(R--, h);\n            L >>= 1; R >>= 1;\n        }\n        pull(L0); pull(R0);\n    }\n\n    public int query(int L, int R) {\n        L += N; R += N;\n        int ans = 0;\n        push(L); push(R);\n        while (L <= R) {\n            if ((L & 1) == 1) ans = Math.max(ans, tree[L++]);\n            if ((R & 1) == 0) ans = Math.max(ans, tree[R--]);\n            L >>= 1; R >>= 1;\n        }\n        return ans;\n    }\n}",
        "langSlug": "java"
      },
      {
        "code": "class SegmentTree(object):\n    def __init__(self, N, update_fn, query_fn):\n        self.N = N\n        self.H = 1\n        while 1 << self.H < N:\n            self.H += 1\n\n        self.update_fn = update_fn\n        self.query_fn = query_fn\n        self.tree = [0] * (2 * N)\n        self.lazy = [0] * N\n\n    def _apply(self, x, val):\n        self.tree[x] = self.update_fn(self.tree[x], val)\n        if x < self.N:\n            self.lazy[x] = self.update_fn(self.lazy[x], val)\n\n    def _pull(self, x):\n        while x > 1:\n            x /= 2\n            self.tree[x] = self.query_fn(self.tree[x*2], self.tree[x*2 + 1])\n            self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n\n    def _push(self, x):\n        for h in xrange(self.H, 0, -1):\n            y = x >> h\n            if self.lazy[y]:\n                self._apply(y * 2, self.lazy[y])\n                self._apply(y * 2+ 1, self.lazy[y])\n                self.lazy[y] = 0\n\n    def update(self, L, R, h):\n        L += self.N\n        R += self.N\n        L0, R0 = L, R\n        while L <= R:\n            if L & 1:\n                self._apply(L, h)\n                L += 1\n            if R & 1 == 0:\n                self._apply(R, h)\n                R -= 1\n            L /= 2; R /= 2\n        self._pull(L0)\n        self._pull(R0)\n\n    def query(self, L, R):\n        L += self.N\n        R += self.N\n        self._push(L); self._push(R)\n        ans = 0\n        while L <= R:\n            if L & 1:\n                ans = self.query_fn(ans, self.tree[L])\n                L += 1\n            if R & 1 == 0:\n                ans = self.query_fn(ans, self.tree[R])\n                R -= 1\n            L /= 2; R /= 2\n        return ans\n\nclass Solution(object):\n    def fallingSquares(self, positions):\n        #Coordinate compression\n        #index = ...\n\n        tree = SegmentTree(len(index), max, max)\n        best = 0\n        ans = []\n        for left, size in positions:\n            L, R = index[left], index[left + size - 1]\n            h = tree.query(L, R) + size\n            tree.update(L, R, h)\n            best = max(best, h)\n            ans.append(best)\n\n        return ans",
        "langSlug": "python"
      }
    ]
  },
  "topicTags": [
    "Segment Tree",
    "Ordered Map"
  ]
}